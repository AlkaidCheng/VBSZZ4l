// Class: ReadBDTG
// Automatically generated by MethodBase::MakeClass
//

/* configuration options =====================================================

#GEN -*-*-*-*-*-*-*-*-*-*-*- general info -*-*-*-*-*-*-*-*-*-*-*-

Method         : BDT::BDTG
TMVA Release   : 4.1.4         [262404]
ROOT Release   : 5.34/10       [336394]
Creator        : gartoni
Date           : Fri Jan 10 20:20:08 2014
Host           : Linux lxbuild175.cern.ch 2.6.18-308.4.1.el5 #1 SMP Wed Apr 18 16:26:27 CEST 2012 x86_64 x86_64 x86_64 GNU/Linux
Dir            : /afs/cern.ch/user/g/gartoni/Training
Training events: 47324
Analysis type  : [Classification]


#OPT -*-*-*-*-*-*-*-*-*-*-*-*- options -*-*-*-*-*-*-*-*-*-*-*-*-

# Set by User:
V: "False" [Verbose output (short form of "VerbosityLevel" below - overrides the latter one)]
VarTransform: "Normalize" [List of variable transformations performed before training, e.g., "D_Background,P_Signal,G,N_AllClasses" for: "Decorrelation, PCA-transformation, Gaussianisation, Normalisation, each for the given class of events ('AllClasses' denotes all events of all classes, if no class indication is given, 'All' is assumed)"]
H: "False" [Print method-specific help message]
NTrees: "150" [Number of trees in the forest]
BoostType: "Grad" [Boosting type for the trees in the forest]
UseBaggedGrad: "True" [Use only a random subsample of all events for growing the trees in each iteration. (Only valid for GradBoost)]
GradBaggingFraction: "5.000000e-01" [Defines the fraction of events to be used in each iteration when UseBaggedGrad=kTRUE. (Only valid for GradBoost)]
Shrinkage: "7.000000e-01" [Learning rate for GradBoost algorithm]
nEventsMin: "500" [Minimum number of events required in a leaf node (default: Classification: max(40, N_train/(Nvar^2)/10), Regression: 10)]
nCuts: "20" [Number of steps during node cut optimisation]
PruneMethod: "costcomplexity" [Method used for pruning (removal) of statistically insignificant branches]
NNodesMax: "8" [Max number of nodes in tree]
MaxDepth: "7" [Max depth of the decision tree allowed]
# Default:
VerbosityLevel: "Default" [Verbosity level]
CreateMVAPdfs: "False" [Create PDFs for classifier outputs (signal and background)]
IgnoreNegWeightsInTraining: "False" [Events with negative weights are ignored in the training (but are included for testing and performance evaluation)]
RenormByClass: "False" [Individually re-normalize each event class to the original size after boosting]
AdaBoostR2Loss: "quadratic" [Type of Loss function in AdaBoostR2t (Linear,Quadratic or Exponential)]
AdaBoostBeta: "1.000000e+00" [Parameter for AdaBoost algorithm]
UseRandomisedTrees: "False" [Choose at each node splitting a random set of variables]
UseNvars: "2" [Number of variables used if randomised tree option is chosen]
UsePoissonNvars: "True" [Interpret "UseNvars" not as fixed number but as mean of a Possion distribution in each split]
UseNTrainEvents: "47324" [Number of randomly picked training events used in randomised (and bagged) trees]
UseWeightedTrees: "True" [Use weighted trees or simple average in classification from the forest]
UseYesNoLeaf: "True" [Use Sig or Bkg categories, or the purity=S/(S+B) as classification of the leaf node]
NodePurityLimit: "5.000000e-01" [In boosting/pruning, nodes with purity > NodePurityLimit are signal; background otherwise.]
SeparationType: "giniindex" [Separation criterion for node splitting]
UseFisherCuts: "False" [Use multivariate splits using the Fisher criterion]
MinLinCorrForFisher: "8.000000e-01" [The minimum linear correlation between two variables demanded for use in Fisher criterion in node splitting]
UseExclusiveVars: "False" [Variables already used in fisher criterion are not anymore analysed individually for node splitting]
PruneStrength: "0.000000e+00" [Pruning strength]
PruneBeforeBoost: "False" [Flag to prune the tree before applying boosting algorithm]
PruningValFraction: "5.000000e-01" [Fraction of events to use for optimizing automatic pruning.]
DoBoostMonitor: "False" [Create control plot with ROC integral vs tree number]
NegWeightTreatment: "ignorenegweights" [How to treat events with negative weights in the BDT training (particular the boosting) : Ignore;  Boost With inverse boostweight; Pair events with negative and positive weights in traning sample and *annihilate* them (experimental!); Randomly pair events with negative and positive weights in leaf node and do not boost them (experimental!) ]
##


#VAR -*-*-*-*-*-*-*-*-*-*-*-* variables *-*-*-*-*-*-*-*-*-*-*-*-

NVar 5
dijet_invmass                 dijet_invmass                 dijet_invmass                 m_{jj} [MeV]                                                    'F'    [40005.1289062,129996.171875]
dijet_deltaeta                dijet_deltaeta                dijet_deltaeta                #Delta#eta                                                      'F'    [2.3540109396e-05,3.24512720108]
leading_jet_pt                leading_jet_pt                leading_jet_pt                lead jet p_{T} [MeV]                                            'F'    [25124.4960938,567228.4375]
subleading_jet_pt             subleading_jet_pt             subleading_jet_pt             sub jet p_{T} [MeV]                                             'F'    [25000.1328125,215329.5625]
leading_jet_eta               leading_jet_eta               leading_jet_eta               lead jet #eta                                                   'F'    [-4.50338411331,4.48900413513]
NSpec 0


============================================================================ */

#include <vector>
#include <cmath>
#include <string>
#include <iostream>

#define NN new BDTGNode
   
#ifndef BDTGNode__def
#define BDTGNode__def
   
class BDTGNode {
   
public:
   
   // constructor of an essentially "empty" node floating in space
   BDTGNode ( BDTGNode* left,BDTGNode* right,
                          int selector, double cutValue, bool cutType, 
                          int nodeType, double purity, double response ) :
   fLeft         ( left         ),
   fRight        ( right        ),
   fSelector     ( selector     ),
   fCutValue     ( cutValue     ),
   fCutType      ( cutType      ),
   fNodeType     ( nodeType     ),
   fPurity       ( purity       ),
   fResponse     ( response     ){
   }

   virtual ~BDTGNode();

   // test event if it decends the tree at this node to the right
   virtual bool GoesRight( const std::vector<double>& inputValues ) const;
   BDTGNode* GetRight( void )  {return fRight; };

   // test event if it decends the tree at this node to the left 
   virtual bool GoesLeft ( const std::vector<double>& inputValues ) const;
   BDTGNode* GetLeft( void ) { return fLeft; };   

   // return  S/(S+B) (purity) at this node (from  training)

   double GetPurity( void ) const { return fPurity; } 
   // return the node type
   int    GetNodeType( void ) const { return fNodeType; }
   double GetResponse(void) const {return fResponse;}

private:

   BDTGNode*   fLeft;     // pointer to the left daughter node
   BDTGNode*   fRight;    // pointer to the right daughter node
   int                     fSelector; // index of variable used in node selection (decision tree)   
   double                  fCutValue; // cut value appplied on this node to discriminate bkg against sig
   bool                    fCutType;  // true: if event variable > cutValue ==> signal , false otherwise
   int                     fNodeType; // Type of node: -1 == Bkg-leaf, 1 == Signal-leaf, 0 = internal 
   double                  fPurity;   // Purity of node from training
   double                  fResponse; // Regression response value of node
}; 
   
//_______________________________________________________________________
   BDTGNode::~BDTGNode()
{
   if (fLeft  != NULL) delete fLeft;
   if (fRight != NULL) delete fRight;
}; 
   
//_______________________________________________________________________
bool BDTGNode::GoesRight( const std::vector<double>& inputValues ) const
{
   // test event if it decends the tree at this node to the right
   bool result;
     result = (inputValues[fSelector] > fCutValue );
   if (fCutType == true) return result; //the cuts are selecting Signal ;
   else return !result;
}
   
//_______________________________________________________________________
bool BDTGNode::GoesLeft( const std::vector<double>& inputValues ) const
{
   // test event if it decends the tree at this node to the left
   if (!this->GoesRight(inputValues)) return true;
   else return false;
}
   
#endif
   
#ifndef IClassifierReader__def
#define IClassifierReader__def

class IClassifierReader {

 public:

   // constructor
   IClassifierReader() : fStatusIsClean( true ) {}
   virtual ~IClassifierReader() {}

   // return classifier response
   virtual double GetMvaValue( const std::vector<double>& inputValues ) const = 0;

   // returns classifier status
   bool IsStatusClean() const { return fStatusIsClean; }

 protected:

   bool fStatusIsClean;
};

#endif

class ReadBDTG : public IClassifierReader {

 public:

   // constructor
   ReadBDTG( std::vector<std::string>& theInputVars ) 
      : IClassifierReader(),
        fClassName( "ReadBDTG" ),
        fNvars( 5 ),
        fIsNormalised( false )
   {      
      // the training input variables
      const char* inputVars[] = { "dijet_invmass", "dijet_deltaeta", "leading_jet_pt", "subleading_jet_pt", "leading_jet_eta" };

      // sanity checks
      if (theInputVars.size() <= 0) {
         std::cout << "Problem in class \"" << fClassName << "\": empty input vector" << std::endl;
         fStatusIsClean = false;
      }

      if (theInputVars.size() != fNvars) {
         std::cout << "Problem in class \"" << fClassName << "\": mismatch in number of input values: "
                   << theInputVars.size() << " != " << fNvars << std::endl;
         fStatusIsClean = false;
      }

      // validate input variables
      for (size_t ivar = 0; ivar < theInputVars.size(); ivar++) {
         if (theInputVars[ivar] != inputVars[ivar]) {
            std::cout << "Problem in class \"" << fClassName << "\": mismatch in input variable names" << std::endl
                      << " for variable [" << ivar << "]: " << theInputVars[ivar].c_str() << " != " << inputVars[ivar] << std::endl;
            fStatusIsClean = false;
         }
      }

      // initialize min and max vectors (for normalisation)
      fVmin[0] = -1;
      fVmax[0] = 1;
      fVmin[1] = -1;
      fVmax[1] = 1;
      fVmin[2] = -1;
      fVmax[2] = 1;
      fVmin[3] = -1;
      fVmax[3] = 1;
      fVmin[4] = -1;
      fVmax[4] = 1;

      // initialize input variable types
      fType[0] = 'F';
      fType[1] = 'F';
      fType[2] = 'F';
      fType[3] = 'F';
      fType[4] = 'F';

      // initialize constants
      Initialize();

      // initialize transformation
      InitTransform();
   }

   // destructor
   virtual ~ReadBDTG() {
      Clear(); // method-specific
   }

   // the classifier response
   // "inputValues" is a vector of input values in the same order as the 
   // variables given to the constructor
   double GetMvaValue( const std::vector<double>& inputValues ) const;

 private:

   // method-specific destructor
   void Clear();

   // input variable transformation

   double fMin_1[3][5];
   double fMax_1[3][5];
   void InitTransform_1();
   void Transform_1( std::vector<double> & iv, int sigOrBgd ) const;
   void InitTransform();
   void Transform( std::vector<double> & iv, int sigOrBgd ) const;

   // common member variables
   const char* fClassName;

   const size_t fNvars;
   size_t GetNvar()           const { return fNvars; }
   char   GetType( int ivar ) const { return fType[ivar]; }

   // normalisation of input variables
   const bool fIsNormalised;
   bool IsNormalised() const { return fIsNormalised; }
   double fVmin[5];
   double fVmax[5];
   double NormVariable( double x, double xmin, double xmax ) const {
      // normalise to output range: [-1, 1]
      return 2*(x - xmin)/(xmax - xmin) - 1.0;
   }

   // type of input variable: 'F' or 'I'
   char   fType[5];

   // initialize internal variables
   void Initialize();
   double GetMvaValue__( const std::vector<double>& inputValues ) const;

   // private members (method specific)
   std::vector<BDTGNode*> fForest;       // i.e. root nodes of decision trees
   std::vector<double>                fBoostWeights; // the weights applied in the individual boosts
};

double ReadBDTG::GetMvaValue__( const std::vector<double>& inputValues ) const
{
   double myMVA = 0;
   for (unsigned int itree=0; itree<fForest.size(); itree++){
      BDTGNode *current = fForest[itree];
      while (current->GetNodeType() == 0) { //intermediate node
         if (current->GoesRight(inputValues)) current=(BDTGNode*)current->GetRight();
         else current=(BDTGNode*)current->GetLeft();
      }
      myMVA += current->GetResponse();
   }
   return 2.0/(1.0+exp(-2.0*myMVA))-1.0;
};

void ReadBDTG::Initialize()
{
  // itree = 0
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.52359,0.0268843) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.315063,-0.212375) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.187873,-0.359922) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.0905797,-0.467758) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.0611776,-0.507979) , 
2, -0.959872, 0, 0, 0.0762509,-0.423749) , 
1, 0.370556, 1, 0, 0.155931,-0.34407) , 
1, 0.0179969, 1, 0, 0.282192,-0.217808) , 
3, -0.809524, 0, 0, 0.350199,-0.149801)    );
  // itree = 1
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.395989,-0.0241728) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.283748,-0.153605) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.223984,-0.236735) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.17623,-0.265869) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.124657,-0.320992) , 
3, -0.970036, 0, 0, 0.149531,-0.244494) , 
2, -0.951927, 0, 0, 0.203978,-0.214036) , 
0, -0.537509, 0, 0, 0.222653,-0.194857) , 
0, -0.428571, 0, 0, 0.354639,-0.0617299)    );
  // itree = 2
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.389019,0.00970642) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.28695,-0.133386) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.238507,-0.198721) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.139434,-0.302387) , 
4, 0.311892, 1, 0, 0.215264,-0.17529) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.109436,-0.332331) , 
4, -0.359318, 0, 0, 0.198185,-0.190023) , 
0, 0.591852, 1, 0, 0.228456,-0.161187) , 
0, 0.428588, 1, 0, 0.355634,-0.0273212)    );
  // itree = 3
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.45235,0.0532747) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.288792,-0.0664609) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.236912,-0.115032) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.157621,-0.191562) , 
2, -0.953212, 0, 0, 0.185345,-0.119234) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.114526,-0.246889) , 
4, 0.42959, 1, 0, 0.175975,-0.126936) , 
2, -0.929802, 0, 0, 0.241615,-0.0827654) , 
3, -0.90475, 0, 0, 0.35385,-0.0154228)    );
  // itree = 4
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.657172,0.177696) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.362891,0.00497138) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.271728,-0.0740284) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.129749,-0.2174) , 
4, 0.426855, 1, 0, 0.250259,-0.066272) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.13498,-0.223668) , 
4, -0.328041, 0, 0, 0.229942,-0.0810706) , 
0, 0.333333, 1, 0, 0.328614,-0.0180347) , 
3, -0.619046, 0, 0, 0.35886,-0.00228123)    );
  // itree = 5
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.402965,0.0357188) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.336568,-0.16153) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.242472,-0.0590298) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.184889,-0.140946) , 
4, -0.257699, 0, 0, 0.227852,-0.0559245) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.152748,-0.182813) , 
4, 0.347036, 1, 0, 0.21686,-0.066004) , 
3, -0.80227, 0, 0, 0.240063,-0.080776) , 
0, -0.33354, 0, 0, 0.355699,-0.00429968)    );
  // itree = 6
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.381761,0.0172901) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.169555,-0.183138) , 
4, 0.523841, 1, 0, 0.368746,0.00491769) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.263121,-0.0885263) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.209852,-0.161149) , 
4, -0.498529, 0, 0, 0.23716,-0.0864316) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.132233,-0.242279) , 
4, -0.591875, 0, 0, 0.201769,-0.111734) , 
4, -0.428571, 0, 0, 0.353187,-0.00595151)    );
  // itree = 7
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.373397,0.00717498) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.203314,-0.173589) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.316522,-0.0403852) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.12489,-0.183458) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.0871141,-0.101654) , 
1, 0.353649, 1, 0, 0.106656,-0.0739401) , 
1, -0.0444888, 1, 0, 0.171569,-0.0603455) , 
2, -0.809075, 0, 0, 0.184729,-0.0853242) , 
0, 0.619008, 1, 0, 0.349136,-0.0062926)    );
  // itree = 8
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.397291,0.0259984) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.311722,-0.0262858) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.21501,-0.12589) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.189582,-0.0706633) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.152867,-0.135495) , 
0, -0.896383, 0, 0, 0.179737,-0.0535271) , 
2, -0.834079, 0, 0, 0.190266,-0.0644701) , 
0, -0.637221, 0, 0, 0.264381,-0.0368613) , 
0, -0.238125, 0, 0, 0.351568,-9.55503e-05)    );
  // itree = 9
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.40331,0.0284324) , 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.309452,-0.0365642) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.176441,-0.120021) , 
0, 0.210862, 1, 0, 0.226533,-0.0556385) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.149616,-0.142302) , 
3, -0.979275, 0, 0, 0.21086,-0.0616319) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.161858,-0.0472583) , 
4, 0.428571, 1, 0, 0.203934,-0.0561971) , 
1, -0.142857, 1, 0, 0.355591,0.00283131)    );
  // itree = 10
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.389277,0.0182983) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.449478,0.0243313) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.272316,-0.0527031) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.202381,-0.184047) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.133497,-0.0849811) , 
0, 0.528181, 1, 0, 0.162752,-0.0736284) , 
4, 0.324767, 1, 0, 0.251561,-0.0411759) , 
1, -0.809218, 1, 0, 0.273424,-0.034614) , 
0, 0.238046, 1, 0, 0.35282,-0.00150468)    );
  // itree = 11
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.448341,0.020849) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.261431,-0.0144981) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.216202,-0.0573091) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.206245,-0.096174) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.163838,-0.0591135) , 
0, -0.428975, 0, 0, 0.192006,-0.0510021) , 
4, -0.0428394, 0, 0, 0.205495,-0.042323) , 
3, -0.965259, 0, 0, 0.236181,-0.0242508) , 
3, -0.908777, 0, 0, 0.351276,-0.00231944)    );
  // itree = 12
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.394097,0.0225544) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.248527,-0.0814755) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.218458,0.012319) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.158027,-0.0305231) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.138028,-0.0886827) , 
1, -0.671538, 0, 0, 0.150952,-0.0262021) , 
2, -0.862205, 0, 0, 0.16621,-0.0186629) , 
3, -0.914004, 0, 0, 0.202389,-0.0361755) , 
0, -0.523828, 0, 0, 0.358051,0.00638003)    );
  // itree = 13
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.778003,0.156522) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.370577,0.00768425) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.207178,-0.119541) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.120298,-0.00604807) , 
1, -0.00526387, 1, 0, 0.183957,-0.0569731) , 
4, -0.460377, 0, 0, 0.354892,0.000258239) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.0978487,-0.20688) , 
4, 0.619048, 1, 0, 0.347933,-0.00258603) , 
3, -0.333333, 0, 0, 0.35872,0.000599156)    );
  // itree = 14
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.387658,0.00821149) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.420445,-0.0681888) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.295586,0.0197965) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.231256,-0.0923771) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.145478,-0.0327416) , 
0, 0.347058, 1, 0, 0.162085,-0.0236248) , 
3, -0.891171, 0, 0, 0.204827,-0.0119699) , 
3, -0.809524, 0, 0, 0.275896,-0.0255086) , 
0, 0.238095, 1, 0, 0.352666,-0.00386174)    );
  // itree = 15
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.403778,0.0178366) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.401899,-0.103412) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.259451,-0.0153286) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.278848,-0.071858) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.201941,-0.0393841) , 
3, -0.924664, 0, 0, 0.236961,-0.0358922) , 
4, 0.0569102, 1, 0, 0.249566,-0.0213281) , 
3, -0.683516, 0, 0, 0.262482,-0.0265307) , 
0, -0.238125, 0, 0, 0.354801,-0.000923305)    );
  // itree = 16
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.420795,0.0165562) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.259057,-0.0539683) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.305539,0.066323) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.169413,-0.0167461) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.166232,-0.113734) , 
2, -0.941156, 1, 0, 0.168695,-0.0213355) , 
2, -0.922858, 0, 0, 0.192448,-0.00999932) , 
0, -0.333371, 0, 0, 0.231914,-0.0246321) , 
2, -0.904762, 0, 0, 0.353052,-0.000992524)    );
  // itree = 17
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.367187,0.0049064) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.259895,-0.118962) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.255821,-0.0958937) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.21229,-0.0119691) , 
0, -0.142542, 0, 0, 0.236297,-0.0373328) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.10391,0.0220119) , 
1, 0.049593, 1, 0, 0.195602,-0.0238742) , 
1, -0.627751, 1, 0, 0.213385,-0.0387595) , 
4, 0.424045, 1, 0, 0.351524,-0.000873705)    );
  // itree = 18
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.376236,-0.00148232) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.207611,-0.102011) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.175142,0.0247367) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.188668,-0.00603538) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.093575,-0.141015) , 
3, -0.969274, 0, 0, 0.153041,-0.0261441) , 
4, 0.0968746, 0, 0, 0.161799,-0.0113239) , 
3, -0.871029, 0, 0, 0.176211,-0.0298719) , 
0, -0.619017, 0, 0, 0.347551,-0.00517438)    );
  // itree = 19
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.376792,0.0182676) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.378142,-0.00185287) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.194992,-0.0740428) , 
0, 0.714233, 1, 0, 0.334697,-0.0107633) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.27785,-0.121181) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.1441,-0.0296062) , 
0, 0.428276, 1, 0, 0.197719,-0.0403076) , 
4, -0.333333, 0, 0, 0.311745,-0.0157139) , 
0, 0.142812, 1, 0, 0.352432,0.00217052)    );
  // itree = 20
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.388397,0.0119003) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.370715,-0.0253095) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.22796,0.0213135) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.12059,-0.0525037) , 
2, -0.901709, 0, 0, 0.166832,-0.00685245) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.13199,0.0601896) , 
0, 0.782305, 1, 0, 0.157201,0.000557078) , 
1, -0.142857, 1, 0, 0.276458,-0.0100686) , 
0, 0.238068, 1, 0, 0.35355,0.00271003)    );
  // itree = 21
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.392282,0.0129209) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.35062,-0.0822674) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.402511,0.0154614) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.335711,-0.0434194) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.212219,-0.0157601) , 
0, -0.265321, 0, 0, 0.234313,-0.0135491) , 
3, -0.887451, 0, 0, 0.29074,-0.00504139) , 
2, -0.707875, 0, 0, 0.297947,-0.0117862) , 
0, -0.142825, 0, 0, 0.353462,0.000314232)    );
  // itree = 22
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.44809,0.0237922) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.359549,0.0107099) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.27821,-0.0426131) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.159677,0.020947) , 
0, 0.428683, 1, 0, 0.242301,-0.0174686) , 
1, -0.333333, 1, 0, 0.30256,-0.00460144) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.0978192,-0.146576) , 
4, -0.609655, 0, 0, 0.294231,-0.00712937) , 
2, -0.838399, 0, 0, 0.354683,0.00246213)    );
  // itree = 23
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.430906,0.0168283) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.378992,-0.0468938) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.382464,0.000846703) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.210225,-0.0436997) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.171464,0.0337127) , 
0, -0.522673, 0, 0, 0.202508,-0.0169684) , 
3, -0.940921, 0, 0, 0.316075,-0.00588062) , 
1, -0.641269, 1, 0, 0.323133,-0.00906404) , 
1, -0.721041, 1, 0, 0.351287,-0.00353266)    );
  // itree = 24
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.376299,0.00892117) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.209268,-0.0452557) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.170807,-0.108456) , 
4, -0.0705251, 0, 0, 0.193466,-0.0431879) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.164363,0.00758896) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.148186,-0.0353266) , 
0, -0.83648, 1, 0, 0.156988,-0.00565439) , 
3, -0.924315, 0, 0, 0.175338,-0.0245358) , 
0, -0.714237, 0, 0, 0.355695,0.002974)    );
  // itree = 25
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.383948,0.00717508) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.33436,-0.0106255) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.306478,-0.0758749) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.134417,0.0620277) , 
1, 0.115994, 1, 0, 0.261028,-0.0330113) , 
4, 0.239033, 1, 0, 0.317335,-0.0129156) , 
0, 0.142857, 1, 0, 0.359372,-0.00158104) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.075483,-0.163801) , 
4, 0.621986, 1, 0, 0.351989,-0.00312234)    );
  // itree = 26
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.471836,0.018582) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.32997,-0.00267809) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.308329,-0.0410944) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.291993,-0.0160044) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.215933,0.0376648) , 
2, -0.841419, 0, 0, 0.237596,0.00998709) , 
0, 0.238153, 1, 0, 0.286363,-0.0160615) , 
4, 0.139236, 1, 0, 0.314303,-0.00691021) , 
2, -0.763372, 0, 0, 0.350161,-0.00232205)    );
  // itree = 27
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.728835,0.066851) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.463664,0.0199822) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.272217,-0.00323631) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.140854,0.0953909) , 
4, 0.518981, 1, 0, 0.263291,0.000169598) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.113118,-0.109256) , 
0, -0.904644, 0, 0, 0.257391,-0.00182481) , 
3, -0.875991, 0, 0, 0.340613,0.00495769) , 
3, -0.478959, 0, 0, 0.358101,0.00682504)    );
  // itree = 28
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.389714,0.00453743) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.320768,-0.058874) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.228783,-0.0462209) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.132824,-0.00882531) , 
1, 0.0210961, 1, 0, 0.15784,-0.0100938) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.113528,0.0824697) , 
4, -0.335776, 0, 0, 0.149052,-0.00359627) , 
1, -0.142664, 1, 0, 0.240257,-0.0238938) , 
0, 0.333276, 1, 0, 0.351195,-0.00382101)    );
  // itree = 29
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.379495,0.00201341) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.196482,-0.108064) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.209168,-0.0486271) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.229297,0.0663381) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.0662281,-0.0689949) , 
2, -0.913036, 0, 0, 0.155854,0.0106671) , 
2, -0.849111, 0, 0, 0.179522,-0.00638204) , 
2, -0.712729, 0, 0, 0.182736,-0.0174731) , 
0, 0.618881, 1, 0, 0.354593,-0.000998323)    );
  // itree = 30
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.462186,0.0125926) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.320674,-0.0199946) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.410174,-0.00925596) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.224543,0.0429284) , 
3, -0.795097, 0, 0, 0.268253,0.0146235) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.149207,-0.0463231) , 
0, 0.818438, 1, 0, 0.247054,0.00843301) , 
0, 0.238007, 1, 0, 0.300117,-0.0073954) , 
2, -0.809524, 0, 0, 0.351819,-0.00221186)    );
  // itree = 31
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.370615,0.0057579) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.346533,-0.0575198) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.324571,-0.0303855) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.138209,0.0561923) , 
1, 0.1042, 1, 0, 0.276105,-0.0103422) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.210859,0.0689075) , 
0, -0.428112, 0, 0, 0.264601,-0.00256702) , 
1, -0.634529, 1, 0, 0.29138,-0.0141268) , 
4, -0.248446, 0, 0, 0.352398,-0.000259233)    );
  // itree = 32
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.380232,0.0128687) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.326596,-0.00338584) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.353287,-0.0701791) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.266016,-0.0266395) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.17575,0.0124317) , 
4, 0.29743, 1, 0, 0.21239,-0.00345684) , 
0, 0.387889, 1, 0, 0.266769,-0.0211227) , 
4, 0.144208, 1, 0, 0.305706,-0.00874582) , 
0, 0.142868, 1, 0, 0.352362,0.00226039)    );
  // itree = 33
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.392655,0.0132299) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.364347,-0.0526629) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.30886,0.0206876) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.144774,-0.101833) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.128263,-0.0023623) , 
0, -0.510599, 0, 0, 0.134843,-0.0228629) , 
2, -0.965872, 0, 0, 0.276421,0.00680448) , 
2, -0.821653, 0, 0, 0.299283,-0.00508804) , 
0, -0.142906, 0, 0, 0.354267,0.0030667)    );
  // itree = 34
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.370686,0.00106096) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.283902,-0.0573277) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.240502,-0.0413796) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.264236,0.0680324) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.0988497,-0.0480973) , 
1, 0.048003, 1, 0, 0.184118,0.0119235) , 
2, -0.906199, 0, 0, 0.209426,-0.00408102) , 
1, -0.462617, 1, 0, 0.244364,-0.0189611) , 
4, -0.335446, 0, 0, 0.351723,-0.00223794)    );
  // itree = 35
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.593777,0.0227192) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.366726,0.0077585) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.290668,-0.0125834) , 
1, -0.548984, 1, 0, 0.320744,-0.00270642) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -1, 0.191092,-0.0823747) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.17835,-0.0142363) , 
0, -0.237591, 0, 0, 0.184832,-0.0270938) , 
3, -0.986395, 0, 0, 0.30684,-0.00520132) , 
3, -0.714286, 0, 0, 0.353576,-0.00172093)    );
  // itree = 36
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.521413,-0.0638714) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.429782,0.0142068) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.232602,0.0225473) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.241831,-0.0480278) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.111182,0.103507) , 
0, 0.619086, 1, 0, 0.213106,-0.0172085) , 
0, -0.142599, 1, 0, 0.223173,-0.00172329) , 
3, -0.929922, 0, 0, 0.352027,0.00567505) , 
2, -0.428571, 0, 0, 0.356462,0.00436255)    );
  // itree = 37
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.39118,0.010107) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.473675,-0.104883) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.408742,-0.0334973) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.353642,0.0277012) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.177498,-0.017251) , 
0, -0.510323, 0, 0, 0.26698,0.00596446) , 
3, -0.812008, 0, 0, 0.289651,0.000774824) , 
3, -0.641107, 0, 0, 0.302479,-0.00500821) , 
0, -0.142891, 0, 0, 0.35474,0.00183213)    );
  // itree = 38
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.453338,-0.0117574) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.265728,-0.0220449) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.267959,0.0351012) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.138509,0.0368404) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.0933765,-0.042842) , 
3, -0.950056, 0, 0, 0.107131,-0.00548469) , 
1, 0.20202, 1, 0, 0.231889,0.0151879) , 
1, -0.52379, 1, 0, 0.24346,0.0051634) , 
3, -0.904762, 0, 0, 0.354683,-0.00216833)    );
  // itree = 39
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.451414,0.00946046) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.341382,-0.0159557) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.257242,0.0739471) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.130983,-0.0158745) , 
0, 0.388175, 1, 0, 0.182815,0.013373) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.0795156,-0.10176) , 
2, -0.972793, 0, 0, 0.165348,0.00514004) , 
1, 0.0227664, 1, 0, 0.303668,-0.00764829) , 
2, -0.809524, 0, 0, 0.351138,-0.00307885)    );
  // itree = 40
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.585329,0.0156206) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.438967,-0.0372508) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.419433,0.0557105) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.298499,-0.0134366) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.21452,0.00024735) , 
3, -0.955953, 0, 0, 0.26568,-0.00536847) , 
3, -0.845829, 0, 0, 0.280682,-0.000954994) , 
3, -0.809535, 0, 0, 0.303635,-0.00495229) , 
3, -0.714286, 0, 0, 0.349004,-0.00236592)    );
  // itree = 41
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.417331,0.0140529) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.271836,-0.0167236) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.270478,0.0114204) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.193671,0.0596477) , 
0, -0.523434, 0, 0, 0.230011,0.0180889) , 
0, -0.33291, 0, 0, 0.265811,-0.00614779) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.173772,0.101522) , 
4, 0.514911, 1, 0, 0.257767,-0.00227416) , 
1, -0.333333, 1, 0, 0.357917,0.00532099)    );
  // itree = 42
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.394755,0.00661391) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.290434,-0.0548393) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.260178,-0.0213385) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.21082,0.137354) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.0881152,0.0659375) , 
2, -0.895383, 0, 0, 0.137094,0.0330687) , 
3, -0.940341, 0, 0, 0.22511,1.71023e-05) , 
2, -0.760396, 0, 0, 0.242098,-0.00890658) , 
0, 0.333299, 1, 0, 0.355334,0.00109294)    );
  // itree = 43
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.371481,0.00662504) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.33487,-0.00934908) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.342316,-0.0523676) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.191928,0.0402587) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.178109,-0.0140457) , 
0, -0.81001, 1, 0, 0.184769,0.00560381) , 
0, -0.637229, 0, 0, 0.298045,-0.0256187) , 
0, -0.0478746, 0, 0, 0.31764,-0.0150192) , 
4, 0.144208, 1, 0, 0.353213,-0.00217546)    );
  // itree = 44
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.531654,0.0314558) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.349832,0.00511105) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.432758,-0.0238283) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.272834,-0.0312065) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.22005,0.0227442) , 
2, -0.830358, 0, 0, 0.24063,-0.000554734) , 
0, 0.319977, 1, 0, 0.317369,-0.00722825) , 
0, 0.0479333, 1, 0, 0.335854,-0.0011256) , 
2, -0.643919, 0, 0, 0.355497,0.00114697)    );
  // itree = 45
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.400605,0.005942) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.284097,-0.0860666) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.307505,0.0313621) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.269896,-0.0124616) , 
1, -0.868106, 1, 0, 0.275661,-0.0036921) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.157226,-0.0692113) , 
4, 0.409218, 1, 0, 0.263165,-0.00702131) , 
2, -0.678071, 0, 0, 0.265123,-0.0120998) , 
0, -0.23815, 0, 0, 0.353669,-0.00160729)    );
  // itree = 46
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.46018,0.0145904) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.392278,0.00828112) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.319543,-0.0537433) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.238436,0.00827617) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.186176,-0.0525568) , 
4, -0.141415, 0, 0, 0.219855,-0.00675786) , 
2, -0.915473, 0, 0, 0.252856,-0.0173044) , 
2, -0.881786, 0, 0, 0.299126,-0.00955985) , 
2, -0.809235, 0, 0, 0.34995,-0.00337755)    );
  // itree = 47
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.418625,0.00648089) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.302775,-0.0196464) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.368428,0.0654394) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.233582,0.0200447) , 
4, 0.493226, 1, 0, 0.307441,0.0291835) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.134006,-0.0430364) , 
0, 0.333755, 1, 0, 0.238928,0.0103901) , 
4, 0.338476, 1, 0, 0.291537,-0.0085667) , 
1, -0.5238, 1, 0, 0.349868,-0.00260391)    );
  // itree = 48
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.394875,0.00859206) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.219961,-0.0382182) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.211417,0.0540316) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.162632,0.0037212) , 
1, -0.500814, 1, 0, 0.195773,0.0193168) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.189733,-0.0306299) , 
2, -0.787177, 1, 0, 0.194536,0.0119229) , 
0, -0.700813, 0, 0, 0.20794,-0.00676797) , 
0, -0.428571, 0, 0, 0.35091,0.00283181)    );
  // itree = 49
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.51763,-0.0348014) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.609353,-0.0256864) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.356636,0.00738599) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.253232,0.0685202) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.177865,-0.0191454) , 
0, -0.755084, 0, 0, 0.223975,0.0196365) , 
0, -0.428501, 0, 0, 0.323847,0.00865301) , 
3, -0.633433, 0, 0, 0.346413,0.00656912) , 
2, -0.595961, 0, 0, 0.358945,0.00440356)    );
  // itree = 50
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.37869,0.00697308) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.484084,-0.0438043) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.381593,0.0320932) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.257608,-0.0356378) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.250951,-0.0113585) , 
1, -0.509843, 1, 0, 0.254071,-0.0143986) , 
2, -0.870068, 0, 0, 0.290759,-0.00351256) , 
3, -0.786992, 0, 0, 0.328899,-0.00928264) , 
0, -0.047619, 0, 0, 0.354649,-0.00217238)    );
  // itree = 51
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.383748,0.00674726) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.46165,0.00285151) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.283726,-0.0316723) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.130992,-0.0240125) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.122852,0.0589264) , 
4, -0.218708, 0, 0, 0.128374,-0.000609554) , 
2, -0.904457, 0, 0, 0.245233,-0.0151691) , 
0, 0.305513, 1, 0, 0.304315,-0.0104856) , 
0, 0.142247, 1, 0, 0.353802,-0.00108346)    );
  // itree = 52
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.536923,0.0147378) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.350322,0.0354392) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.307238,-0.0514067) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.293149,-0.0215289) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.180692,0.0183282) , 
0, 0.332641, 1, 0, 0.264854,-0.00864522) , 
1, -0.81491, 1, 0, 0.270574,-0.0121942) , 
2, -0.69734, 0, 0, 0.277494,-0.00908529) , 
3, -0.809524, 0, 0, 0.351605,-0.00347449)    );
  // itree = 53
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.519949,-0.0104333) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.645977,-0.0380189) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.518944,0.0305914) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.306863,0.0112166) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.0941209,-0.0712923) , 
4, -0.619048, 0, 0, 0.300054,0.00617843) , 
3, -0.759754, 0, 0, 0.334562,0.00880221) , 
3, -0.49518, 0, 0, 0.343702,0.00781135) , 
2, -0.619008, 0, 0, 0.358873,0.00654213)    );
  // itree = 54
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.435462,0.00955647) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.367189,-0.0169127) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.263577,-0.0193152) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.341669,0.0690411) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.199847,0.0391616) , 
2, -0.90265, 0, 0, 0.259904,0.0310645) , 
4, 0.245728, 1, 0, 0.262734,-0.00237592) , 
0, -0.238015, 0, 0, 0.333308,-0.00831487) , 
1, -0.809462, 1, 0, 0.350828,-0.00576576)    );
  // itree = 55
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.372615,0.013184) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.391572,-0.00828681) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.276227,0.018727) , 
4, -0.312552, 0, 0, 0.359382,-0.00120435) , 
4, 0.0978122, 0, 0, 0.364106,0.00239376) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.18073,-0.0816273) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.129723,-0.0010846) , 
2, -0.920753, 0, 0, 0.157465,-0.0234255) , 
4, 0.528716, 1, 0, 0.35262,0.000958672)    );
  // itree = 56
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.364441,0.0114297) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.380305,-0.00342106) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.333879,-0.0690024) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.371575,0.0252976) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.182983,-0.0405372) , 
0, -0.387706, 0, 0, 0.252388,-0.00690063) , 
2, -0.846419, 0, 0, 0.277971,-0.0207904) , 
0, -0.142816, 0, 0, 0.339022,-0.0097214) , 
4, 0.0442994, 1, 0, 0.352924,-0.000318294)    );
  // itree = 57
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.415884,-0.0121761) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.410266,-0.00100629) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.405255,0.0452823) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.234998,0.0303737) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.210247,-0.00247888) , 
4, 0.0583397, 1, 0, 0.223842,0.00856495) , 
3, -0.872536, 0, 0, 0.262985,0.0138293) , 
2, -0.879516, 0, 0, 0.333676,0.00685597) , 
1, -0.714286, 1, 0, 0.355747,0.0027779)    );
  // itree = 58
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.363635,0.00984944) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.396166,-0.0164182) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.307017,0.0509562) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.190928,0.0150427) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.157782,-0.0466871) , 
1, -0.458095, 0, 0, 0.181386,-0.00121671) , 
2, -0.942286, 0, 0, 0.225295,0.0104346) , 
2, -0.9192, 0, 0, 0.344672,-0.00479937) , 
4, -0.0415415, 0, 0, 0.355032,0.00136114)    );
  // itree = 59
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.420521,0.00238312) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.341144,-0.0322723) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.238648,-0.0508772) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.202308,0.0304197) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.182272,-0.006813) , 
1, -0.450683, 1, 0, 0.188323,0.00226578) , 
2, -0.922736, 0, 0, 0.196235,-0.00323853) , 
3, -0.897677, 0, 0, 0.232937,-0.00827409) , 
2, -0.904558, 0, 0, 0.352901,-0.00191377)    );
  // itree = 60
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.408568,0.000389603) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.294224,-0.0336643) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.224919,0.0326496) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.216274,-0.0124219) , 
1, -0.291547, 0, 0, 0.218358,-0.00111936) , 
2, -0.871208, 0, 0, 0.246998,-0.0096215) , 
0, -0.274374, 0, 0, 0.354771,-0.00302767) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.227504,0.0768628) , 
0, 0.904689, 1, 0, 0.350826,-0.00175363)    );
  // itree = 61
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.421639,0.0108573) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.341225,-0.00386574) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.190339,-0.0758477) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.202923,0.0201263) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.113594,-0.0630341) , 
2, -0.969595, 0, 0, 0.151603,-0.0102183) , 
2, -0.957611, 0, 0, 0.162241,-0.0190385) , 
2, -0.947728, 0, 0, 0.300481,-0.00634515) , 
1, -0.535097, 1, 0, 0.354953,-0.000154695)    );
  // itree = 62
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.372902,0.00737018) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.421451,0.00242345) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.280488,-0.0442964) , 
2, -0.808839, 0, 0, 0.328376,-0.0181888) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.174424,0.000293096) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.151497,0.0823154) , 
3, -0.953619, 0, 0, 0.162479,0.0154835) , 
1, 0.0126609, 1, 0, 0.29717,-0.0118548) , 
4, 0.226879, 1, 0, 0.353771,0.00067425)    );
  // itree = 63
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.569867,0.0447913) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.481608,-0.0376802) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.373846,0.00132311) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.304437,0.0570974) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.181113,0.0175776) , 
3, -0.827073, 0, 0, 0.20832,0.0151013) , 
0, -0.52381, 0, 0, 0.341583,0.00366697) , 
2, -0.618913, 0, 0, 0.348821,0.00221028) , 
2, -0.466229, 0, 0, 0.355983,0.00309223)    );
  // itree = 64
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.372084,-0.00365735) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.542286,0.0310064) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.302204,-0.019677) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.264433,0.0169867) , 
1, -0.720857, 1, 0, 0.272932,0.00491624) , 
3, -0.79834, 0, 0, 0.338448,0.00914155) , 
4, 0.148067, 1, 0, 0.360949,0.00139012) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.166354,-0.0822417) , 
0, 0.904455, 1, 0, 0.355183,8.08824e-05)    );
  // itree = 65
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.51439,-0.0414151) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.394956,-0.0281938) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.35872,0.00518202) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.259946,-0.0803325) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.14372,-0.01362) , 
3, -0.751119, 0, 0, 0.166009,-0.0152223) , 
0, 0.619073, 1, 0, 0.331745,0.000875263) , 
1, -0.814043, 1, 0, 0.341971,-0.00238698) , 
2, -0.555183, 0, 0, 0.351456,-0.00375844)    );
  // itree = 66
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.370618,0.00215325) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.311664,-0.0685157) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.250718,-0.0417267) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.30047,0.0728238) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.129582,-0.0187518) , 
1, -0.125451, 1, 0, 0.195532,0.0121705) , 
1, -0.366656, 1, 0, 0.223428,-0.00620568) , 
4, -0.390663, 0, 0, 0.24725,-0.0166562) , 
4, -0.327711, 0, 0, 0.350936,-0.00144964)    );
  // itree = 67
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.436992,0.0321272) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.632247,-0.0417218) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.52164,0.0199948) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.42067,-0.0275967) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.266539,-0.00485178) , 
3, -0.822592, 0, 0, 0.290705,-0.00576991) , 
3, -0.713347, 0, 0, 0.309607,-0.00409864) , 
3, -0.569973, 0, 0, 0.326514,-0.00531793) , 
1, -0.726237, 1, 0, 0.355389,0.0017777)    );
  // itree = 68
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.411027,-0.0173883) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.498828,-0.00992809) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.334253,0.0160301) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.313465,0.0189113) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.216534,-0.0146935) , 
2, -0.875838, 0, 0, 0.244095,-0.00225647) , 
1, -0.387711, 1, 0, 0.276116,0.0024048) , 
3, -0.79837, 0, 0, 0.325886,0.000247921) , 
1, -0.714263, 1, 0, 0.348554,-0.00297274)    );
  // itree = 69
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.410232,0.0102698) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.38178,-0.0277143) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.251555,-0.0109216) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.223789,0.0153757) , 
4, -0.220418, 0, 0, 0.244428,-0.00282298) , 
3, -0.820545, 0, 0, 0.275214,-0.00686935) , 
0, -0.183677, 0, 0, 0.357983,0.00152325) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.221059,0.0917911) , 
0, 0.904689, 1, 0, 0.353819,0.00279797)    );
  // itree = 70
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.504676,0.0297694) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.350773,-0.0145442) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.327644,0.0445478) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.495785,0.0589363) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.269052,-0.0060849) , 
0, -0.183711, 0, 0, 0.285558,-0.000197003) , 
1, -0.864798, 1, 0, 0.291388,0.00373984) , 
0, -0.142857, 0, 0, 0.325268,-0.00384841) , 
2, -0.714286, 0, 0, 0.354745,3.70862e-05)    );
  // itree = 71
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.509407,-0.0687968) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.368336,0.00755139) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.209208,0.062769) , 
0, 0.723191, 1, 0, 0.363444,0.00579922) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.19211,-0.0539603) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.149845,0.00761288) , 
2, -0.835841, 0, 0, 0.170302,-0.0128401) , 
0, 0.809465, 1, 0, 0.3517,0.00466588) , 
2, -0.428571, 0, 0, 0.355652,0.00340883)    );
  // itree = 72
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.410725,-0.0184066) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.394544,-0.00309242) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.300481,0.0273915) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.23273,0.0143654) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.112777,-0.0244443) , 
1, 0.098749, 1, 0, 0.163197,-0.00161851) , 
0, 0.429885, 1, 0, 0.246881,0.00998363) , 
1, -0.242837, 1, 0, 0.332951,0.0029098) , 
1, -0.721064, 1, 0, 0.353367,-0.00113624)    );
  // itree = 73
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.373593,0.00833975) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.362749,-0.0197172) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.336215,0.0515761) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.200089,-0.00498425) , 
3, -0.913453, 0, 0, 0.262112,0.0153122) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.131357,-0.0482779) , 
4, 0.403739, 1, 0, 0.223111,0.00457225) , 
0, -0.333246, 0, 0, 0.323877,-0.00801309) , 
4, 0.143642, 1, 0, 0.356662,0.000921126)    );
  // itree = 74
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.394135,0.00415672) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.207362,-0.0604378) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.201524,0.0375049) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.126244,-0.0295759) , 
2, -0.94138, 0, 0, 0.152228,-0.00101128) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.0757956,-0.0748908) , 
0, 0.698156, 1, 0, 0.128195,-0.00769071) , 
1, 0.151963, 1, 0, 0.164461,-0.0204896) , 
1, -0.047619, 1, 0, 0.352271,-0.00139168)    );
  // itree = 75
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.450452,0.00748649) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.245664,-0.0421553) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.234953,-0.0172849) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.208043,0.0178219) , 
3, -0.971155, 0, 0, 0.224011,-0.00220646) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.193123,0.0781794) , 
0, -0.714302, 0, 0, 0.221616,0.000688107) , 
1, -0.523757, 1, 0, 0.229906,-0.00865158) , 
3, -0.913531, 0, 0, 0.353532,-0.000811717)    );
  // itree = 76
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.380463,-0.0023714) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.290238,-0.0145743) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.30593,0.0904583) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.186933,0.0535004) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.0971492,-0.0190478) , 
2, -0.851574, 0, 0, 0.128301,0.00450805) , 
3, -0.865657, 0, 0, 0.192963,0.022891) , 
1, -0.428276, 1, 0, 0.224338,0.0124639) , 
0, 0.523749, 1, 0, 0.354716,0.000719155)    );
  // itree = 77
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.394925,-0.00811863) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.308187,0.0354887) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.218209,0.00671747) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.079946,-0.0535272) , 
1, 0.293215, 1, 0, 0.174443,-0.0024607) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.142256,0.0578729) , 
4, -0.321708, 0, 0, 0.168122,0.00207092) , 
3, -0.912225, 0, 0, 0.213857,0.00885856) , 
1, -0.142857, 1, 0, 0.351414,-0.00212379)    );
  // itree = 78
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.698675,0.0448972) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.336806,-0.0135317) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.367077,-0.0120412) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.479453,0.0680263) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.235695,0.0151253) , 
3, -0.818164, 0, 0, 0.269848,0.0144807) , 
2, -0.861872, 0, 0, 0.310201,0.00506966) , 
4, 0.142857, 1, 0, 0.327552,-0.00407908) , 
3, -0.54386, 0, 0, 0.350588,-0.00202008)    );
  // itree = 79
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.367758,-0.00109369) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.500732,0.0782222) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.289116,0.0313868) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.152373,-0.0630766) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.139137,0.0257625) , 
1, -0.284253, 1, 0, 0.145745,-0.0105888) , 
4, -0.495519, 0, 0, 0.224751,0.00564265) , 
3, -0.736125, 0, 0, 0.263188,0.0125561) , 
4, -0.337368, 0, 0, 0.351873,0.00129166)    );
  // itree = 80
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.432608,0.0268053) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.4988,-0.0269441) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.283716,-0.00606453) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.10772,0.105664) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.0840667,0.0771557) , 
3, -0.968414, 0, 0, 0.0961143,0.0216516) , 
1, 0.363744, 1, 0, 0.270415,-0.00206309) , 
3, -0.820635, 0, 0, 0.334717,-0.00699882) , 
1, -0.814031, 1, 0, 0.351496,-0.00273498)    );
  // itree = 81
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.412051,0.011254) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.332978,-4.6953e-05) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.187775,-0.05575) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.230033,0.0404902) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.0933378,-0.0477523) , 
3, -0.928393, 0, 0, 0.169829,0.00515621) , 
4, 0.216294, 1, 0, 0.182126,-0.0187614) , 
0, 0.333558, 1, 0, 0.276518,-0.00704174) , 
1, -0.428562, 1, 0, 0.350926,0.00102926)    );
  // itree = 82
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.46695,-0.00634592) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.328687,0.0660487) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.237098,0.00431521) , 
3, -0.918369, 0, 0, 0.247165,0.006821) , 
3, -0.904762, 0, 0, 0.364495,0.000729044) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.17586,-0.0214948) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.134782,-0.0827293) , 
4, 0.0207196, 0, 0, 0.154785,-0.0258734) , 
0, -0.809407, 0, 0, 0.350356,-0.00106445)    );
  // itree = 83
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.406199,0.00360879) , 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.327663,-0.00939916) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.195267,-0.0382538) , 
2, -0.917934, 0, 0, 0.267901,-0.0128425) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.1735,0.0393323) , 
4, 0.485512, 1, 0, 0.257999,-0.00979137) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.1594,0.0477266) , 
4, -0.518029, 0, 0, 0.250363,-0.00761904) , 
1, -0.333333, 1, 0, 0.348103,-0.00130125)    );
  // itree = 84
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.413463,-0.0230967) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.368759,0.0140321) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.31759,-0.0480161) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.376118,0.0331846) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.201305,-0.0281352) , 
1, -0.278099, 1, 0, 0.282146,0.00226383) , 
1, -0.64662, 1, 0, 0.290997,-0.0059805) , 
4, 0.24005, 1, 0, 0.34978,0.00551151) , 
1, -0.904737, 1, 0, 0.355412,0.00364171)    );
  // itree = 85
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.421574,0.0126802) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.434771,-0.041425) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.512528,0.0280139) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.301341,-0.0129827) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.18024,0.0159312) , 
0, 0.333276, 1, 0, 0.265904,-0.00400483) , 
3, -0.781407, 0, 0, 0.30135,-0.00038217) , 
2, -0.718808, 0, 0, 0.31515,-0.00330235) , 
1, -0.619048, 1, 0, 0.354175,0.000997154)    );
  // itree = 86
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.370084,0.00611164) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.323166,-0.0237429) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.319929,-0.0699339) , 
0, -0.15636, 0, 0, 0.322483,-0.0220144) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.183345,0.0528311) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.183112,-0.0609838) , 
4, -0.342098, 1, 0, 0.183251,0.000175638) , 
0, -0.428553, 0, 0, 0.290693,-0.0169478) , 
4, -0.24051, 0, 0, 0.35122,-0.000958568)    );
  // itree = 87
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.396606,-0.00546763) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.408538,0.0397141) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.300257,-0.0482424) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.229203,0.0294842) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.183914,-0.0245436) , 
1, -0.385316, 1, 0, 0.217879,0.00910356) , 
3, -0.755474, 0, 0, 0.228996,0.00310676) , 
0, -0.383189, 0, 0, 0.273555,0.00982949) , 
0, -0.238045, 0, 0, 0.354369,0.0009988)    );
  // itree = 88
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.559361,0.0272337) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.385131,-0.0132148) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.222923,0.00144253) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.143855,0.0477927) , 
0, 0.092711, 1, 0, 0.201349,0.00522338) , 
2, -0.93522, 0, 0, 0.342056,-0.00580998) , 
2, -0.546663, 0, 0, 0.353987,-0.00450436) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.188843,0.0568064) , 
0, -0.904621, 0, 0, 0.348285,-0.00345731)    );
  // itree = 89
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.418458,0.00715557) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.308332,-0.0709129) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.199641,0.00645803) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.189261,-0.0542084) , 
1, -0.814244, 0, 0, 0.198656,0.000172368) , 
3, -0.873278, 0, 0, 0.211005,-0.00545825) , 
2, -0.921077, 0, 0, 0.359653,0.0020384) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.14725,-0.0567391) , 
0, -0.904711, 0, 0, 0.352628,0.00107561)    );
  // itree = 90
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.519217,-0.0406975) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.540187,0.0640095) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.350906,-0.000951532) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.215103,0.0218628) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.162588,0.0948664) , 
2, -0.922477, 0, 0, 0.194431,0.0214755) , 
0, -0.809555, 0, 0, 0.340055,0.00090679) , 
2, -0.592291, 0, 0, 0.345285,0.00199272) , 
2, -0.523647, 0, 0, 0.353363,0.000657406)    );
  // itree = 91
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.359807,-0.0109226) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.429498,0.028604) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.219526,-0.0075303) , 
4, -0.430397, 0, 0, 0.370056,0.0131391) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.204878,0.0289564) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.142273,-0.0851715) , 
1, -0.629312, 0, 0, 0.172332,-0.0141265) , 
0, -0.523785, 0, 0, 0.333906,0.00815418) , 
4, -0.145573, 0, 0, 0.351172,-0.00211253)    );
  // itree = 92
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.4155,-0.00965401) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.347348,0.00310404) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.412022,0.0420599) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.353716,0.0147385) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.118051,-0.0422771) , 
1, 0.111381, 1, 0, 0.315121,0.00552693) , 
4, 0.134738, 1, 0, 0.33702,0.0109054) , 
4, 0.0442994, 1, 0, 0.342666,0.00604182) , 
1, -0.814031, 1, 0, 0.355424,0.00386383)    );
  // itree = 93
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.365242,-0.00853517) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.361069,0.0125223) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.358178,0.125705) , 
4, 0.442434, 1, 0, 0.360683,0.017024) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -1, 0.22422,-0.0242586) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.134066,0.0186619) , 
2, -0.926648, 0, 0, 0.190591,-0.0056973) , 
4, 0.490385, 1, 0, 0.311702,0.010481) , 
4, 0.238592, 1, 0, 0.352456,-0.0018047)    );
  // itree = 94
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.359844,0.00833025) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.37144,-0.0152487) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.417695,0.0621386) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.278082,0.00224096) , 
4, 0.136073, 1, 0, 0.307103,0.00967086) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.147647,-0.0618162) , 
0, 0.818595, 1, 0, 0.279024,0.00312129) , 
0, 0.238104, 1, 0, 0.341592,-0.00596884) , 
4, 0.0464135, 1, 0, 0.351653,0.000304905)    );
  // itree = 95
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.405243,0.0116444) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.274595,-0.0254723) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.331746,0.0491296) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.245793,-0.00376635) , 
4, 0.168383, 1, 0, 0.263753,0.00504406) , 
4, 0.0897426, 1, 0, 0.269871,-0.00723488) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.214889,0.0596224) , 
4, -0.41853, 0, 0, 0.264434,-0.00362662) , 
0, -0.238015, 0, 0, 0.35659,0.00377707)    );
  // itree = 96
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.386797,0.000981609) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.322929,-0.0257089) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.304712,0.06056) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.18572,-0.0315439) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.0961062,0.0546919) , 
1, 0.222463, 1, 0, 0.150156,-0.00420926) , 
1, -0.441463, 1, 0, 0.19536,0.00801613) , 
0, 0.673468, 1, 0, 0.280135,-0.00823599) , 
0, 0.238095, 1, 0, 0.353597,-0.00210703)    );
  // itree = 97
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.572838,0.0505633) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.56602,-0.0329544) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.356981,0.0133263) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.285867,-0.0132571) , 
1, -0.628085, 1, 0, 0.308265,-0.00289575) , 
3, -0.703568, 0, 0, 0.342861,-0.00551934) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.218586,0.0620992) , 
0, 0.904762, 1, 0, 0.339134,-0.00444157) , 
2, -0.52381, 0, 0, 0.350248,-0.00263995)    );
  // itree = 98
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.422689,0.000876941) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.298701,0.00974016) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.420898,0.078945) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.222565,0.0250333) , 
3, -0.900479, 0, 0, 0.268914,0.0244904) , 
0, -0.237721, 0, 0, 0.292016,0.0101329) , 
1, -0.428571, 1, 0, 0.364514,0.0048463) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.104703,-0.0679408) , 
4, -0.620255, 0, 0, 0.357751,0.00406253)    );
  // itree = 99
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.384483,0.00815241) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.205465,-0.0177123) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.207292,-0.116798) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.198482,-0.0659646) , 
2, -0.796232, 0, 0, 0.202261,-0.0536864) , 
4, 0.181387, 0, 0, 0.203194,-0.040831) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.099888,-0.0247309) , 
3, -0.924189, 0, 0, 0.168725,-0.0298963) , 
0, 0.618994, 1, 0, 0.356358,0.00085185)    );
  // itree = 100
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.39924,-0.00845105) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.366679,0.0357514) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.272074,-0.0232935) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.216102,0.0241092) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.148362,-0.0195445) , 
3, -0.98096, 0, 0, 0.197933,0.00683934) , 
3, -0.900046, 0, 0, 0.207441,0.00402122) , 
3, -0.868699, 0, 0, 0.240145,0.00822309) , 
1, -0.238095, 1, 0, 0.350774,-0.00151143)    );
  // itree = 101
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.373626,-0.00831711) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.33325,0.107978) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.233699,0.0232535) , 
2, -0.737949, 1, 0, 0.287494,0.0421125) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.144479,0.0352995) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.120562,-0.0326607) , 
0, 0.85476, 1, 0, 0.135163,0.00327953) , 
1, -0.162998, 1, 0, 0.205717,0.0212656) , 
0, 0.618983, 1, 0, 0.352078,-0.00213471)    );
  // itree = 102
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.364883,-0.00998905) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.226174,0.113919) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.191497,0.022043) , 
1, -0.780597, 0, 0, 0.20614,0.0299561) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.199457,-0.0222287) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.171636,-0.00054936) , 
3, -0.924045, 0, 0, 0.183894,-0.00565885) , 
1, -0.64524, 1, 0, 0.195437,0.0128205) , 
0, -0.714286, 0, 0, 0.346985,-0.00454802)    );
  // itree = 103
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.443885,0.0317803) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.363796,0.00438135) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.292901,-0.045153) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.21625,0.0428029) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.168142,-0.0213244) , 
0, -0.0489329, 1, 0, 0.190408,0.00479806) , 
4, -0.456845, 0, 0, 0.239244,-0.0111863) , 
4, -0.331638, 0, 0, 0.344173,0.000678322) , 
1, -0.904762, 1, 0, 0.352831,0.00248037)    );
  // itree = 104
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.413523,-0.0193832) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.36679,0.0132371) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.234904,0.00106469) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.147125,-0.0761128) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.142539,-0.0190622) , 
4, -0.146812, 0, 0, 0.145653,-0.0289489) , 
3, -0.886755, 0, 0, 0.175079,-0.0191833) , 
0, -0.619093, 0, 0, 0.341842,0.00508563) , 
1, -0.814043, 1, 0, 0.354205,0.00194819)    );
  // itree = 105
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.423087,0.0116374) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.340595,-0.00447846) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.118496,-0.0333705) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.0787367,-0.118742) , 
4, 0.0613603, 1, 0, 0.0994144,-0.0266477) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.0902202,-0.00275613) , 
0, 0.719974, 1, 0, 0.0963499,-0.0180274) , 
1, 0.229063, 1, 0, 0.310457,-0.00485613) , 
1, -0.618992, 1, 0, 0.351797,-0.000192994)    );
  // itree = 106
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.422078,-0.000586491) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.407076,0.0555798) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.227379,0.00402585) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.177032,0.0561858) , 
0, -0.541591, 0, 0, 0.216008,0.00723881) , 
3, -0.867119, 0, 0, 0.242015,0.0117765) , 
2, -0.910572, 0, 0, 0.362127,0.00364853) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.136874,-0.0597495) , 
0, -0.904762, 0, 0, 0.354635,0.00262498)    );
  // itree = 107
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.370329,0.00643874) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.388393,-0.0317102) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.355593,0.0068573) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.177179,-0.055627) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.116614,-0.00292027) , 
0, 0.394826, 1, 0, 0.147838,-0.0158893) , 
1, -0.0962193, 1, 0, 0.304969,-0.000476208) , 
4, -0.224567, 0, 0, 0.325592,-0.00566525) , 
4, -0.142857, 0, 0, 0.355167,0.000901068)    );
  // itree = 108
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.580032,0.0355647) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.520096,-0.0463485) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.360025,-0.00136728) , 
2, -0.532318, 0, 0, 0.364039,-0.00161706) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.102173,-0.0202998) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.0907385,-0.121531) , 
1, -0.238087, 0, 0, 0.0977249,-0.022558) , 
2, -0.972794, 0, 0, 0.348563,-0.00283398) , 
2, -0.428571, 0, 0, 0.354804,-0.002108)    );
  // itree = 109
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.38067,0.00799212) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.269908,-0.0428947) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.194786,0.0596682) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.118651,0.0250291) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.0789874,-0.0853144) , 
4, -0.0333904, 0, 0, 0.101102,-0.00710485) , 
3, -0.901113, 0, 0, 0.128594,0.00292195) , 
3, -0.84028, 0, 0, 0.188821,-0.0105727) , 
0, 0.619058, 1, 0, 0.356213,0.00330203)    );
  // itree = 110
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.35899,-0.0077145) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.453804,0.0483109) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.409105,0.0308341) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.355175,-0.0591781) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.298067,0.0110096) , 
4, -0.225126, 0, 0, 0.305446,0.000358097) , 
4, -0.186336, 0, 0, 0.340391,0.00727709) , 
1, -0.820502, 1, 0, 0.358842,0.0112232) , 
4, -0.0506369, 0, 0, 0.358925,0.00215178)    );
  // itree = 111
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.401491,-0.0119376) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.26319,0.0238097) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.161452,-0.0132938) , 
4, 0.424045, 1, 0, 0.249158,0.0108345) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.266239,0.00840484) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.148451,-0.074066) , 
1, -0.119413, 1, 0, 0.206737,-0.0153466) , 
0, -0.23581, 0, 0, 0.242593,0.00678285) , 
1, -0.238095, 1, 0, 0.352983,-0.0035998)    );
  // itree = 112
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.387768,-0.00494472) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.24294,0.0407854) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.255752,0.0375784) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.159076,0.0237848) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.150033,-0.0372842) , 
3, -0.945042, 1, 0, 0.155137,-0.00168046) , 
3, -0.871701, 0, 0, 0.188274,0.00659684) , 
0, -0.727823, 0, 0, 0.214238,0.0145705) , 
0, -0.523721, 0, 0, 0.354955,6.35467e-05)    );
  // itree = 113
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.52045,-0.0666265) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.435987,-0.0101474) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.237518,0.00665947) , 
3, -0.92708, 0, 0, 0.358185,-0.00293516) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.21881,0.0649886) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.174086,0.0178869) , 
4, 0.0872253, 1, 0, 0.199894,0.0212604) , 
0, 0.809524, 1, 0, 0.348959,-0.00152486) , 
2, -0.428345, 0, 0, 0.353284,-0.00258517)    );
  // itree = 114
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.465951,0.0147635) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.32446,-0.0188197) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.149288,-0.00387214) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.156988,0.0453893) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.0805041,0.0409284) , 
0, 0.320462, 1, 0, 0.119326,0.0139295) , 
2, -0.955417, 0, 0, 0.136708,0.00489607) , 
1, 0.142857, 1, 0, 0.296152,-0.0101316) , 
2, -0.809479, 0, 0, 0.350168,-0.00370841)    );
  // itree = 115
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.368508,0.00294799) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.31137,-0.0371266) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.289811,-0.00428014) , 
0, 0.0478363, 1, 0, 0.301257,-0.0144361) , 
4, 0.37855, 1, 0, 0.363193,0.000661192) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.241468,0.0786229) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.0923571,-0.0338426) , 
4, 0.637206, 1, 0, 0.181502,0.0195951) , 
4, 0.52381, 1, 0, 0.353024,0.00172086)    );
  // itree = 116
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.525532,-0.0582946) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.411863,0.0149061) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.344474,-0.00922976) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.232155,0.0801114) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.166428,-0.00249046) , 
2, -0.8707, 0, 0, 0.176038,0.00504538) , 
1, -0.0203863, 1, 0, 0.280328,-0.00201713) , 
1, -0.428571, 1, 0, 0.351264,0.00458157) , 
2, -0.428571, 0, 0, 0.356046,0.0033889)    );
  // itree = 117
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.506015,0.0183321) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.352201,0.00409778) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.45685,0.0089987) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.336253,-0.0748944) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.209486,-0.0218605) , 
1, -0.619048, 1, 0, 0.22843,-0.0180999) , 
3, -0.77211, 0, 0, 0.278017,-0.0127043) , 
0, 0.142857, 1, 0, 0.324956,-0.0029172) , 
2, -0.714102, 0, 0, 0.354419,-0.000463349)    );
  // itree = 118
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.719669,0.038463) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.375095,-0.014558) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.353268,-0.031309) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.365768,0.034145) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.224787,0.00274716) , 
1, -0.224464, 1, 0, 0.266451,0.00800329) , 
2, -0.794797, 0, 0, 0.277833,0.00420029) , 
1, -0.428571, 1, 0, 0.328815,-0.00327615) , 
3, -0.523796, 0, 0, 0.350919,-0.00174925)    );
  // itree = 119
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.380197,0.00988583) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.417534,-0.0346391) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.310007,0.00894556) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.248033,-0.0564366) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.183541,-0.010439) , 
1, -0.017483, 1, 0, 0.225306,-0.0251961) , 
1, -0.22008, 1, 0, 0.29183,-0.000815067) , 
2, -0.805349, 0, 0, 0.322525,-0.00672923) , 
0, -0.0476568, 0, 0, 0.352466,-2.34119e-05)    );
  // itree = 120
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.358591,0.0147812) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.399803,-0.0134173) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.330396,0.0276326) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.197894,0.00134025) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.185949,-0.0676572) , 
4, -0.0843861, 1, 0, 0.194016,-0.0121689) , 
3, -0.95054, 0, 0, 0.281044,0.00768575) , 
0, -0.238105, 0, 0, 0.358381,-0.00309263) , 
4, 0.047619, 0, 0, 0.358474,0.00252251)    );
  // itree = 121
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.714486,-0.0382661) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.344516,0.00194829) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.396357,-0.0501126) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.440641,0.0344211) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.312515,-0.0101007) , 
2, -0.728012, 0, 0, 0.32467,-0.00357811) , 
2, -0.619008, 0, 0, 0.329539,-0.00561925) , 
4, 0.0598879, 1, 0, 0.337966,-0.00174142) , 
3, -0.428571, 0, 0, 0.351633,-0.00247623)    );
  // itree = 122
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.359783,-0.011242) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.681391,0.075676) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.336525,-0.0320156) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.301956,0.0105715) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.211452,0.112437) , 
0, -0.714331, 0, 0, 0.292274,0.0113298) , 
2, -0.802158, 0, 0, 0.30264,0.00386782) , 
3, -0.619019, 0, 0, 0.333731,0.00768044) , 
4, -0.137182, 0, 0, 0.350936,-0.00229671)    );
  // itree = 123
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.540443,0.0328122) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.462156,-0.0263714) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.551236,-0.0309893) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.515059,0.0419502) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.297763,0.00238352) , 
3, -0.733507, 0, 0, 0.310976,0.00334701) , 
3, -0.670781, 0, 0, 0.331247,0.0011987) , 
2, -0.682558, 0, 0, 0.342844,-0.000437424) , 
2, -0.52381, 0, 0, 0.352316,0.000630767)    );
  // itree = 124
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.453525,0.0114278) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.303307,0.0035121) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.338648,-0.0276641) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.258399,0.00743139) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.121189,-0.06604) , 
2, -0.957645, 0, 0, 0.22178,-0.00408738) , 
1, -0.238087, 1, 0, 0.28978,-0.0130359) , 
4, -0.0445594, 0, 0, 0.29727,-0.00458611) , 
2, -0.822088, 0, 0, 0.351591,-0.000309561)    );
  // itree = 125
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.456008,-0.00670821) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.320018,0.0514018) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.278869,-0.00352903) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.181606,-0.00865118) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.177302,0.0409651) , 
1, -0.428216, 1, 0, 0.178618,0.0111288) , 
2, -0.933129, 0, 0, 0.235876,0.00348538) , 
2, -0.648974, 0, 0, 0.240505,0.00509991) , 
3, -0.90476, 0, 0, 0.355415,-0.000193779)    );
  // itree = 126
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.413213,0.0134148) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.27792,-0.0493164) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.227707,0.00437404) , 
2, -0.714012, 0, 0, 0.236715,-0.00359603) , 
0, 0.396835, 1, 0, 0.371172,0.0062285) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.208562,0.00113672) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.136233,-0.0712963) , 
2, -0.870344, 0, 0, 0.165791,-0.0194641) , 
0, -0.809524, 0, 0, 0.357555,0.0045251)    );
  // itree = 127
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.411531,-0.0307636) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.510353,-0.0416413) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.374808,0.00506948) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.197168,-0.0350244) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.174843,0.0567014) , 
0, -0.886593, 0, 0, 0.192617,-0.0108332) , 
0, -0.523766, 0, 0, 0.341868,0.000827359) , 
2, -0.515198, 0, 0, 0.34868,-0.0002935) , 
1, -0.907954, 1, 0, 0.354041,-0.00204664)    );
  // itree = 128
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.413908,0.0104242) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.262932,-0.0333378) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.191695,-0.00355926) , 
3, -0.94602, 0, 0, 0.233335,-0.0130193) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.148399,0.113852) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.111251,-0.000453432) , 
0, -0.523372, 1, 0, 0.126318,0.0152147) , 
2, -0.973024, 0, 0, 0.212282,-0.00746513) , 
2, -0.919153, 0, 0, 0.353581,0.00281153)    );
  // itree = 129
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.559552,0.0407066) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.361987,0.004518) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.353345,0.00566734) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.311498,-0.0852123) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.25568,-0.0274135) , 
2, -0.794564, 0, 0, 0.266099,-0.0245952) , 
0, -0.143089, 0, 0, 0.317615,-0.0080299) , 
4, -0.136227, 0, 0, 0.346612,-0.000826537) , 
2, -0.523432, 0, 0, 0.356929,0.000511501)    );
  // itree = 130
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.41282,-0.0119219) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.351122,0.0518202) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.273639,0.00371874) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.11784,-0.0312632) , 
1, 0.142863, 1, 0, 0.231796,-0.00141712) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.162566,0.0662919) , 
0, -0.809048, 0, 0, 0.225459,0.00112879) , 
2, -0.913636, 0, 0, 0.239893,0.00510122) , 
2, -0.904558, 0, 0, 0.350674,-0.00347595)    );
  // itree = 131
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.368242,-0.00670695) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.401183,0.109913) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.337527,0.0882436) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.262015,-0.00202285) , 
0, -0.233828, 1, 0, 0.276769,0.0101848) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.14196,-0.062794) , 
0, -0.524102, 0, 0, 0.252971,0.00319561) , 
4, -0.351037, 0, 0, 0.27333,0.0123559) , 
4, -0.319596, 0, 0, 0.352557,-0.00166279)    );
  // itree = 132
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.414662,0.0087646) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.365401,-0.00325636) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.242,-0.0463538) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.207926,-0.0382912) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.159039,0.00453202) , 
2, -0.940902, 0, 0, 0.178603,-0.00746849) , 
2, -0.875838, 0, 0, 0.194556,-0.0127231) , 
3, -0.920942, 0, 0, 0.27475,-0.00781163) , 
1, -0.428562, 1, 0, 0.351901,-0.000228959)    );
  // itree = 133
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.450558,-0.0138215) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.254217,0.0162031) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.231323,-0.0310417) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.223798,0.0591917) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.179985,-0.0319667) , 
4, 0.0407333, 1, 0, 0.202598,0.00706177) , 
3, -0.9682, 0, 0, 0.220916,-0.00873326) , 
0, -0.0476048, 1, 0, 0.239262,0.00136973) , 
3, -0.904759, 0, 0, 0.351667,-0.00457281)    );
  // itree = 134
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.370978,0.0100479) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.326994,-0.00077856) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.35329,-0.0270761) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.172805,0.0243665) , 
0, -0.551482, 0, 0, 0.260472,-0.00381516) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.232615,-0.0563417) , 
1, -0.478996, 1, 0, 0.250083,-0.0153215) , 
0, -0.142859, 0, 0, 0.296657,-0.00632679) , 
4, -0.233155, 0, 0, 0.352557,0.00339356)    );
  // itree = 135
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.55827,0.042294) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.664064,-0.068353) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.410337,0.0101241) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.301008,0.0312191) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.214603,-0.0181443) , 
2, -0.771356, 0, 0, 0.225241,-0.00642678) , 
3, -0.924446, 0, 0, 0.333122,0.00148561) , 
3, -0.471115, 0, 0, 0.345015,-2.53724e-05) , 
2, -0.466264, 0, 0, 0.35232,0.000904672)    );
  // itree = 136
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.392524,0.00530212) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.204146,-0.008416) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.198751,-0.040667) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.142223,-0.0985016) , 
0, -0.675273, 0, 0, 0.171129,-0.0375515) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.15906,-0.005692) , 
0, -0.841519, 0, 0, 0.167455,-0.0269144) , 
4, -0.035449, 0, 0, 0.187167,-0.0149466) , 
0, -0.523905, 0, 0, 0.35405,9.27081e-05)    );
  // itree = 137
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.362975,0.00972987) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.401923,-0.0225257) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.284417,0.0231402) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.137845,-0.0831808) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.134647,-0.00170356) , 
3, -0.961166, 0, 0, 0.135991,-0.0170228) , 
2, -0.959135, 0, 0, 0.237363,0.00412878) , 
2, -0.904715, 0, 0, 0.342795,-0.00855528) , 
4, 0.0442994, 1, 0, 0.353803,-0.000484949)    );
  // itree = 138
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.508858,-0.0380512) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.380906,-0.00340691) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.316043,0.0472964) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.210562,-0.0164878) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.197793,0.0235535) , 
4, -0.220581, 0, 0, 0.207221,-0.0036876) , 
2, -0.872779, 0, 0, 0.246621,0.00909097) , 
0, -0.33336, 0, 0, 0.34197,0.00102414) , 
2, -0.555057, 0, 0, 0.350988,-0.000338068)    );
  // itree = 139
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.407715,-0.0209214) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.419391,0.0138933) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.349438,-0.00900517) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.220635,0.0879873) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.177571,0.00813033) , 
0, -0.130678, 1, 0, 0.183165,0.00871704) , 
1, -0.0494182, 1, 0, 0.28637,-0.000567135) , 
1, -0.469378, 1, 0, 0.330702,0.00283916) , 
1, -0.714286, 1, 0, 0.351623,-0.00178787)    );
  // itree = 140
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.399837,0.0112993) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.313649,-0.0237331) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.251893,0.017275) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.240177,-0.0586534) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.174779,0.00472416) , 
3, -0.91805, 0, 0, 0.196273,-0.0104877) , 
4, 0.156509, 1, 0, 0.233828,0.00343349) , 
2, -0.870888, 0, 0, 0.263859,-0.00413897) , 
0, -0.238095, 0, 0, 0.353255,0.0034519)    );
  // itree = 141
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.432568,0.0215859) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.354687,-0.0143911) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.310401,0.0377426) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.24625,-0.00332845) , 
4, 0.0646265, 1, 0, 0.280194,0.0120948) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.205256,-0.03914) , 
4, -0.397134, 0, 0, 0.271748,0.00831021) , 
0, -0.238095, 0, 0, 0.329147,-0.00387609) , 
1, -0.722364, 1, 0, 0.356166,0.000923399)    );
  // itree = 142
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.363481,-0.0116068) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.398705,0.0244072) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.404699,-0.0684719) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.257416,0.0198916) , 
0, 0.230404, 1, 0, 0.286785,-0.000908346) , 
0, 0.102195, 1, 0, 0.347558,0.00870802) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.154957,-0.0557184) , 
0, -0.714271, 0, 0, 0.327949,0.0050368) , 
4, 0.142857, 1, 0, 0.351332,-0.00331929)    );
  // itree = 143
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.371451,-0.00926896) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.443109,-0.024812) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.436031,0.0477198) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.425861,-0.022573) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.230665,0.0171808) , 
3, -0.775802, 0, 0, 0.269573,0.00394953) , 
2, -0.704263, 0, 0, 0.29452,0.00789349) , 
1, -0.809218, 1, 0, 0.312407,0.0048811) , 
0, 0.142787, 1, 0, 0.34916,-0.00204602)    );
  // itree = 144
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.708253,0.0480785) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.377591,0.0115866) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.295196,-0.0274185) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.234453,-0.00425439) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.234417,0.0346158) , 
1, -0.335808, 1, 0, 0.234443,0.00371188) , 
2, -0.870888, 0, 0, 0.256312,-0.00445864) , 
0, -0.238125, 0, 0, 0.334167,0.00334751) , 
3, -0.523808, 0, 0, 0.355489,0.00487169)    );
  // itree = 145
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.670817,-0.0340608) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.407766,0.00940323) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.244197,-0.00746609) , 
2, -0.904762, 0, 0, 0.343562,0.00237472) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.177023,-0.0591229) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.155461,-0.0017417) , 
2, -0.849045, 0, 0, 0.166975,-0.0172656) , 
0, 0.808945, 1, 0, 0.332616,0.00115726) , 
3, -0.543886, 0, 0, 0.353557,-0.000212171)    );
  // itree = 146
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.483479,-0.0223254) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.392444,0.00964488) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.193323,-0.0117928) , 
2, -0.938445, 0, 0, 0.346626,0.00383284) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.15883,-0.0839355) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.131502,0.00826255) , 
1, -0.183396, 1, 0, 0.14626,-0.020409) , 
4, 0.531863, 1, 0, 0.335066,0.00243432) , 
2, -0.676799, 0, 0, 0.353394,0.000343664)    );
  // itree = 147
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.589273,0.0137493) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.32545,-0.0178548) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.338461,0.0453705) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.348129,-0.0333376) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.238208,0.00634453) , 
3, -0.891157, 0, 0, 0.269974,-0.00457268) , 
2, -0.742629, 0, 0, 0.277581,-0.000687366) , 
0, -0.142857, 0, 0, 0.304683,-0.00680246) , 
3, -0.714286, 0, 0, 0.350973,-0.00417969)    );
  // itree = 148
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.524393,-0.00612515) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.313183,0.0172882) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.227859,-0.0440383) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.18779,0.0570502) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.111171,-0.0564618) , 
3, -0.988334, 0, 0, 0.152264,0.00360401) , 
1, -0.14285, 1, 0, 0.196499,-0.0139267) , 
3, -0.97279, 0, 0, 0.286139,0.00528014) , 
3, -0.809524, 0, 0, 0.354436,0.00252931)    );
  // itree = 149
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.396049,-0.00283971) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.241623,0.00350676) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.268548,0.114319) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.19396,0.0879485) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.143298,-0.00653277) , 
1, -0.594617, 0, 0, 0.17321,0.0217479) , 
2, -0.897746, 0, 0, 0.19944,0.0328172) , 
3, -0.951083, 0, 0, 0.226038,0.0134475) , 
0, -0.428775, 0, 0, 0.356195,0.00169808)    );
   return;
};
 
// Clean up
inline void ReadBDTG::Clear() 
{
   for (unsigned int itree=0; itree<fForest.size(); itree++) { 
      delete fForest[itree]; 
   }
}
   inline double ReadBDTG::GetMvaValue( const std::vector<double>& inputValues ) const
   {
      // classifier response value
      double retval = 0;

      // classifier response, sanity check first
      if (!IsStatusClean()) {
         std::cout << "Problem in class \"" << fClassName << "\": cannot return classifier response"
                   << " because status is dirty" << std::endl;
         retval = 0;
      }
      else {
         if (IsNormalised()) {
            // normalise variables
            std::vector<double> iV;
            int ivar = 0;
            for (std::vector<double>::const_iterator varIt = inputValues.begin();
                 varIt != inputValues.end(); varIt++, ivar++) {
               iV.push_back(NormVariable( *varIt, fVmin[ivar], fVmax[ivar] ));
            }
            Transform( iV, -1 );
            retval = GetMvaValue__( iV );
         }
         else {
            std::vector<double> iV;
            int ivar = 0;
            for (std::vector<double>::const_iterator varIt = inputValues.begin();
                 varIt != inputValues.end(); varIt++, ivar++) {
               iV.push_back(*varIt);
            }
            Transform( iV, -1 );
            retval = GetMvaValue__( iV );
         }
      }

      return retval;
   }

//_______________________________________________________________________
inline void ReadBDTG::InitTransform_1()
{
   // Normalization transformation, initialisation
   fMin_1[0][0] = 40011.0195312;
   fMax_1[0][0] = 129992.617188;
   fMin_1[1][0] = 40005.1289062;
   fMax_1[1][0] = 129996.171875;
   fMin_1[2][0] = 40005.1289062;
   fMax_1[2][0] = 129996.171875;
   fMin_1[0][1] = 2.38418579102e-05;
   fMax_1[0][1] = 3.11753559113;
   fMin_1[1][1] = 2.3540109396e-05;
   fMax_1[1][1] = 3.24512720108;
   fMin_1[2][1] = 2.3540109396e-05;
   fMax_1[2][1] = 3.24512720108;
   fMin_1[0][2] = 25210.4746094;
   fMax_1[0][2] = 531469.8125;
   fMin_1[1][2] = 25124.4960938;
   fMax_1[1][2] = 567228.4375;
   fMin_1[2][2] = 25124.4960938;
   fMax_1[2][2] = 567228.4375;
   fMin_1[0][3] = 25000.1328125;
   fMax_1[0][3] = 215329.5625;
   fMin_1[1][3] = 25001.3515625;
   fMax_1[1][3] = 181983.015625;
   fMin_1[2][3] = 25000.1328125;
   fMax_1[2][3] = 215329.5625;
   fMin_1[0][4] = -4.0432972908;
   fMax_1[0][4] = 4.29308128357;
   fMin_1[1][4] = -4.50338411331;
   fMax_1[1][4] = 4.48900413513;
   fMin_1[2][4] = -4.50338411331;
   fMax_1[2][4] = 4.48900413513;
}

//_______________________________________________________________________
inline void ReadBDTG::Transform_1( std::vector<double>& iv, int cls) const
{
   // Normalization transformation
   if (cls < 0 || cls > 2) {
   if (2 > 1 ) cls = 2;
      else cls = 2;
   }
   const int nVar = 5;

   // get indices of used variables

   // define the indices of the variables which are transformed by this transformation
   std::vector<int> indicesGet;
   std::vector<int> indicesPut;

   indicesGet.push_back( 0);
   indicesGet.push_back( 1);
   indicesGet.push_back( 2);
   indicesGet.push_back( 3);
   indicesGet.push_back( 4);
   indicesPut.push_back( 0);
   indicesPut.push_back( 1);
   indicesPut.push_back( 2);
   indicesPut.push_back( 3);
   indicesPut.push_back( 4);

   std::vector<double> dv(nVar);
   for (int ivar=0; ivar<nVar; ivar++) dv[ivar] = iv[indicesGet.at(ivar)];
   for (int ivar=0;ivar<5;ivar++) {
      double offset = fMin_1[cls][ivar];
      double scale  = 1.0/(fMax_1[cls][ivar]-fMin_1[cls][ivar]);
      iv[indicesPut.at(ivar)] = (dv[ivar]-offset)*scale * 2 - 1;
   }
}

//_______________________________________________________________________
inline void ReadBDTG::InitTransform()
{
   InitTransform_1();
}

//_______________________________________________________________________
inline void ReadBDTG::Transform( std::vector<double>& iv, int sigOrBgd ) const
{
   Transform_1( iv, sigOrBgd );
}
