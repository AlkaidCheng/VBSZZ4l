// Class: ReadBDTG
// Automatically generated by MethodBase::MakeClass
//

/* configuration options =====================================================

#GEN -*-*-*-*-*-*-*-*-*-*-*- general info -*-*-*-*-*-*-*-*-*-*-*-

Method         : BDT::BDTG
TMVA Release   : 4.1.4         [262404]
ROOT Release   : 5.34/10       [336394]
Creator        : gartoni
Date           : Mon Feb 10 17:00:14 2014
Host           : Linux lxbuild175.cern.ch 2.6.18-308.4.1.el5 #1 SMP Wed Apr 18 16:26:27 CEST 2012 x86_64 x86_64 x86_64 GNU/Linux
Dir            : /afs/cern.ch/user/g/gartoni/Training
Training events: 80981
Analysis type  : [Classification]


#OPT -*-*-*-*-*-*-*-*-*-*-*-*- options -*-*-*-*-*-*-*-*-*-*-*-*-

# Set by User:
V: "False" [Verbose output (short form of "VerbosityLevel" below - overrides the latter one)]
VarTransform: "Normalize" [List of variable transformations performed before training, e.g., "D_Background,P_Signal,G,N_AllClasses" for: "Decorrelation, PCA-transformation, Gaussianisation, Normalisation, each for the given class of events ('AllClasses' denotes all events of all classes, if no class indication is given, 'All' is assumed)"]
H: "False" [Print method-specific help message]
NTrees: "50" [Number of trees in the forest]
BoostType: "Grad" [Boosting type for the trees in the forest]
UseBaggedGrad: "True" [Use only a random subsample of all events for growing the trees in each iteration. (Only valid for GradBoost)]
Shrinkage: "2.750000e-01" [Learning rate for GradBoost algorithm]
nEventsMin: "1000" [Minimum number of events required in a leaf node (default: Classification: max(40, N_train/(Nvar^2)/10), Regression: 10)]
PruneMethod: "costcomplexity" [Method used for pruning (removal) of statistically insignificant branches]
MaxDepth: "5" [Max depth of the decision tree allowed]
# Default:
VerbosityLevel: "Default" [Verbosity level]
CreateMVAPdfs: "False" [Create PDFs for classifier outputs (signal and background)]
IgnoreNegWeightsInTraining: "False" [Events with negative weights are ignored in the training (but are included for testing and performance evaluation)]
RenormByClass: "False" [Individually re-normalize each event class to the original size after boosting]
AdaBoostR2Loss: "quadratic" [Type of Loss function in AdaBoostR2t (Linear,Quadratic or Exponential)]
GradBaggingFraction: "6.000000e-01" [Defines the fraction of events to be used in each iteration when UseBaggedGrad=kTRUE. (Only valid for GradBoost)]
AdaBoostBeta: "1.000000e+00" [Parameter for AdaBoost algorithm]
UseRandomisedTrees: "False" [Choose at each node splitting a random set of variables]
UseNvars: "2" [Number of variables used if randomised tree option is chosen]
UsePoissonNvars: "True" [Interpret "UseNvars" not as fixed number but as mean of a Possion distribution in each split]
UseNTrainEvents: "80981" [Number of randomly picked training events used in randomised (and bagged) trees]
UseWeightedTrees: "True" [Use weighted trees or simple average in classification from the forest]
UseYesNoLeaf: "True" [Use Sig or Bkg categories, or the purity=S/(S+B) as classification of the leaf node]
NodePurityLimit: "5.000000e-01" [In boosting/pruning, nodes with purity > NodePurityLimit are signal; background otherwise.]
SeparationType: "giniindex" [Separation criterion for node splitting]
nCuts: "20" [Number of steps during node cut optimisation]
UseFisherCuts: "False" [Use multivariate splits using the Fisher criterion]
MinLinCorrForFisher: "8.000000e-01" [The minimum linear correlation between two variables demanded for use in Fisher criterion in node splitting]
UseExclusiveVars: "False" [Variables already used in fisher criterion are not anymore analysed individually for node splitting]
PruneStrength: "0.000000e+00" [Pruning strength]
PruneBeforeBoost: "False" [Flag to prune the tree before applying boosting algorithm]
PruningValFraction: "5.000000e-01" [Fraction of events to use for optimizing automatic pruning.]
NNodesMax: "100000" [Max number of nodes in tree]
DoBoostMonitor: "False" [Create control plot with ROC integral vs tree number]
NegWeightTreatment: "ignorenegweights" [How to treat events with negative weights in the BDT training (particular the boosting) : Ignore;  Boost With inverse boostweight; Pair events with negative and positive weights in traning sample and *annihilate* them (experimental!); Randomly pair events with negative and positive weights in leaf node and do not boost them (experimental!) ]
##


#VAR -*-*-*-*-*-*-*-*-*-*-*-* variables *-*-*-*-*-*-*-*-*-*-*-*-

NVar 5
dijet_invmass                 dijet_invmass                 dijet_invmass                 m_{jj} [MeV]                                                    'F'    [130000.945312,4303369.5]
dijet_deltaeta                dijet_deltaeta                dijet_deltaeta                #Delta#eta                                                      'F'    [6.55800104141e-05,8.66915130615]
leading_jet_pt                leading_jet_pt                leading_jet_pt                lead jet p_{T} [MeV]                                            'F'    [25261.5429688,1058657.25]
subleading_jet_pt             subleading_jet_pt             subleading_jet_pt             sub jet p_{T} [MeV]                                             'F'    [25000.6738281,410493.90625]
leading_jet_eta               leading_jet_eta               leading_jet_eta               lead jet #eta                                                   'F'    [-4.51713132858,4.51656913757]
NSpec 0


============================================================================ */

#include <vector>
#include <cmath>
#include <string>
#include <iostream>

#define NN new BDTGNode
   
#ifndef BDTGNode__def
#define BDTGNode__def
   
class BDTGNode {
   
public:
   
   // constructor of an essentially "empty" node floating in space
   BDTGNode ( BDTGNode* left,BDTGNode* right,
                          int selector, double cutValue, bool cutType, 
                          int nodeType, double purity, double response ) :
   fLeft         ( left         ),
   fRight        ( right        ),
   fSelector     ( selector     ),
   fCutValue     ( cutValue     ),
   fCutType      ( cutType      ),
   fNodeType     ( nodeType     ),
   fPurity       ( purity       ),
   fResponse     ( response     ){
   }

   virtual ~BDTGNode();

   // test event if it decends the tree at this node to the right
   virtual bool GoesRight( const std::vector<double>& inputValues ) const;
   BDTGNode* GetRight( void )  {return fRight; };

   // test event if it decends the tree at this node to the left 
   virtual bool GoesLeft ( const std::vector<double>& inputValues ) const;
   BDTGNode* GetLeft( void ) { return fLeft; };   

   // return  S/(S+B) (purity) at this node (from  training)

   double GetPurity( void ) const { return fPurity; } 
   // return the node type
   int    GetNodeType( void ) const { return fNodeType; }
   double GetResponse(void) const {return fResponse;}

private:

   BDTGNode*   fLeft;     // pointer to the left daughter node
   BDTGNode*   fRight;    // pointer to the right daughter node
   int                     fSelector; // index of variable used in node selection (decision tree)   
   double                  fCutValue; // cut value appplied on this node to discriminate bkg against sig
   bool                    fCutType;  // true: if event variable > cutValue ==> signal , false otherwise
   int                     fNodeType; // Type of node: -1 == Bkg-leaf, 1 == Signal-leaf, 0 = internal 
   double                  fPurity;   // Purity of node from training
   double                  fResponse; // Regression response value of node
}; 
   
//_______________________________________________________________________
   BDTGNode::~BDTGNode()
{
   if (fLeft  != NULL) delete fLeft;
   if (fRight != NULL) delete fRight;
}; 
   
//_______________________________________________________________________
bool BDTGNode::GoesRight( const std::vector<double>& inputValues ) const
{
   // test event if it decends the tree at this node to the right
   bool result;
     result = (inputValues[fSelector] > fCutValue );
   if (fCutType == true) return result; //the cuts are selecting Signal ;
   else return !result;
}
   
//_______________________________________________________________________
bool BDTGNode::GoesLeft( const std::vector<double>& inputValues ) const
{
   // test event if it decends the tree at this node to the left
   if (!this->GoesRight(inputValues)) return true;
   else return false;
}
   
#endif
   
#ifndef IClassifierReader__def
#define IClassifierReader__def

class IClassifierReader {

 public:

   // constructor
   IClassifierReader() : fStatusIsClean( true ) {}
   virtual ~IClassifierReader() {}

   // return classifier response
   virtual double GetMvaValue( const std::vector<double>& inputValues ) const = 0;

   // returns classifier status
   bool IsStatusClean() const { return fStatusIsClean; }

 protected:

   bool fStatusIsClean;
};

#endif

class ReadBDTG : public IClassifierReader {

 public:

   // constructor
   ReadBDTG( std::vector<std::string>& theInputVars ) 
      : IClassifierReader(),
        fClassName( "ReadBDTG" ),
        fNvars( 5 ),
        fIsNormalised( false )
   {      
      // the training input variables
      const char* inputVars[] = { "dijet_invmass", "dijet_deltaeta", "leading_jet_pt", "subleading_jet_pt", "leading_jet_eta" };

      // sanity checks
      if (theInputVars.size() <= 0) {
         std::cout << "Problem in class \"" << fClassName << "\": empty input vector" << std::endl;
         fStatusIsClean = false;
      }

      if (theInputVars.size() != fNvars) {
         std::cout << "Problem in class \"" << fClassName << "\": mismatch in number of input values: "
                   << theInputVars.size() << " != " << fNvars << std::endl;
         fStatusIsClean = false;
      }

      // validate input variables
      for (size_t ivar = 0; ivar < theInputVars.size(); ivar++) {
         if (theInputVars[ivar] != inputVars[ivar]) {
            std::cout << "Problem in class \"" << fClassName << "\": mismatch in input variable names" << std::endl
                      << " for variable [" << ivar << "]: " << theInputVars[ivar].c_str() << " != " << inputVars[ivar] << std::endl;
            fStatusIsClean = false;
         }
      }

      // initialize min and max vectors (for normalisation)
      fVmin[0] = -1;
      fVmax[0] = 1;
      fVmin[1] = -1;
      fVmax[1] = 1;
      fVmin[2] = -1;
      fVmax[2] = 0.99999988079071;
      fVmin[3] = -1;
      fVmax[3] = 1;
      fVmin[4] = -1;
      fVmax[4] = 0.99999988079071;

      // initialize input variable types
      fType[0] = 'F';
      fType[1] = 'F';
      fType[2] = 'F';
      fType[3] = 'F';
      fType[4] = 'F';

      // initialize constants
      Initialize();

      // initialize transformation
      InitTransform();
   }

   // destructor
   virtual ~ReadBDTG() {
      Clear(); // method-specific
   }

   // the classifier response
   // "inputValues" is a vector of input values in the same order as the 
   // variables given to the constructor
   double GetMvaValue( const std::vector<double>& inputValues ) const;

 private:

   // method-specific destructor
   void Clear();

   // input variable transformation

   double fMin_1[3][5];
   double fMax_1[3][5];
   void InitTransform_1();
   void Transform_1( std::vector<double> & iv, int sigOrBgd ) const;
   void InitTransform();
   void Transform( std::vector<double> & iv, int sigOrBgd ) const;

   // common member variables
   const char* fClassName;

   const size_t fNvars;
   size_t GetNvar()           const { return fNvars; }
   char   GetType( int ivar ) const { return fType[ivar]; }

   // normalisation of input variables
   const bool fIsNormalised;
   bool IsNormalised() const { return fIsNormalised; }
   double fVmin[5];
   double fVmax[5];
   double NormVariable( double x, double xmin, double xmax ) const {
      // normalise to output range: [-1, 1]
      return 2*(x - xmin)/(xmax - xmin) - 1.0;
   }

   // type of input variable: 'F' or 'I'
   char   fType[5];

   // initialize internal variables
   void Initialize();
   double GetMvaValue__( const std::vector<double>& inputValues ) const;

   // private members (method specific)
   std::vector<BDTGNode*> fForest;       // i.e. root nodes of decision trees
   std::vector<double>                fBoostWeights; // the weights applied in the individual boosts
};

double ReadBDTG::GetMvaValue__( const std::vector<double>& inputValues ) const
{
   double myMVA = 0;
   for (unsigned int itree=0; itree<fForest.size(); itree++){
      BDTGNode *current = fForest[itree];
      while (current->GetNodeType() == 0) { //intermediate node
         if (current->GoesRight(inputValues)) current=(BDTGNode*)current->GetRight();
         else current=(BDTGNode*)current->GetLeft();
      }
      myMVA += current->GetResponse();
   }
   return 2.0/(1.0+exp(-2.0*myMVA))-1.0;
};

void ReadBDTG::Initialize()
{
  // itree = 0
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.942577,0.198582) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.910188,0.184191) , 
0, -0.484875, 0, 0, 0.926875,0.426875) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.832844,0.14993) , 
2, -0.933901, 0, 0, 0.91425,0.41425) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.870216,0.167283) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.81638,0.140497) , 
1, 0.19723, 1, 0, 0.85412,0.35412) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.814529,0.140811) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.735915,0.104592) , 
1, 0.100277, 1, 0, 0.792998,0.292998) , 
0, -0.74823, 0, 0, 0.824662,0.324662) , 
0, -0.641275, 0, 0, 0.865826,0.365826) , 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.775388,0.121499) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.71017,0.0931532) , 
0, -0.857252, 0, 0, 0.737303,0.237303) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.567904,0.0298754) , 
2, -0.954679, 0, 0, 0.71374,0.21374) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.550587,0.0222907) , 
2, -0.739751, 1, 0, 0.693197,0.193197) , 
0, -0.814058, 0, 0, 0.804779,0.304779) , 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.624426,0.0553925) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.521307,0.00932045) , 
0, -0.932839, 0, 0, 0.565131,0.065131) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.414616,-0.0368274) , 
2, -0.958854, 0, 0, 0.539921,0.0399213) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.392971,-0.0462604) , 
2, -0.791804, 1, 0, 0.512032,0.012032) , 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.430533,-0.0300156) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.344739,-0.0659247) , 
2, -0.916209, 0, 0, 0.381286,-0.118714) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.286234,-0.091505) , 
2, -0.841914, 1, 0, 0.35636,-0.143639) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.303439,-0.0868195) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.269369,-0.0967281) , 
1, -0.695623, 0, 0, 0.285144,-0.214856) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.260074,-0.103345) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.222451,-0.117164) , 
3, -0.954659, 0, 0, 0.235921,-0.264079) , 
3, -0.920619, 0, 0, 0.25781,-0.24219) , 
0, -0.982725, 0, 0, 0.30393,-0.19607) , 
0, -0.96372, 0, 0, 0.409776,-0.0902242) , 
0, -0.904762, 0, 0, 0.636388,0.136388)    );
  // itree = 1
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.940996,0.158443) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.909199,0.148382) , 
0, -0.501853, 0, 0, 0.925927,0.332009) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.864584,0.133334) , 
2, -0.924003, 0, 0, 0.914868,0.323758) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.858879,0.129544) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.759321,0.0867268) , 
1, -0.193811, 0, 0, 0.8418,0.267896) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.813373,0.111917) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.689493,0.0584138) , 
2, -0.950553, 0, 0, 0.75528,0.193716) , 
2, -0.925794, 0, 0, 0.822354,0.251223) , 
0, -0.653033, 0, 0, 0.866482,0.285822) , 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.781241,0.101513) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.70317,0.0714609) , 
0, -0.857765, 0, 0, 0.734402,0.185793) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.566621,0.0233987) , 
2, -0.956014, 0, 0, 0.710869,0.167199) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.581623,0.0249275) , 
1, -0.373686, 0, 0, 0.691881,0.151009) , 
0, -0.82017, 0, 0, 0.80577,0.238945) , 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.623436,0.0454206) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.534745,0.0129605) , 
0, -0.92857, 0, 0, 0.569616,0.0577302) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.542302,0.0127148) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.442856,-0.0215358) , 
2, -0.93491, 0, 0, 0.486923,-0.015295) , 
3, -0.945469, 0, 0, 0.542641,0.033909) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.380001,-0.0416457) , 
2, -0.776459, 1, 0, 0.515508,0.0120885) , 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.398388,-0.0351705) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.2929,-0.0759673) , 
2, -0.958128, 0, 0, 0.377158,-0.100816) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.269215,-0.0820148) , 
2, -0.789954, 1, 0, 0.360047,-0.115175) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.291407,-0.0671338) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.225499,-0.095084) , 
0, -0.994429, 0, 0, 0.26695,-0.18149) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.208211,-0.10372) , 
2, -0.833335, 1, 0, 0.25484,-0.193654) , 
0, -0.983292, 0, 0, 0.314161,-0.149404) , 
0, -0.956141, 0, 0, 0.395657,-0.0840391) , 
0, -0.907892, 0, 0, 0.634058,0.103713)    );
  // itree = 2
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.940852,0.139819) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.906743,0.120542) , 
1, 0.162334, 0, 0, 0.927707,0.263922) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.917218,0.12613) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.846865,0.100496) , 
2, -0.906854, 0, 0, 0.882671,0.227603) , 
3, -0.903754, 0, 0, 0.914058,0.252915) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.845428,0.103399) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.764154,0.065628) , 
2, -0.721224, 1, 0, 0.83314,0.204637) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.741157,0.063449) , 
1, 0.254831, 1, 0, 0.822723,0.19693) , 
0, -0.653033, 0, 0, 0.866289,0.223634) , 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.773622,0.0843457) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.688075,0.0500773) , 
0, -0.886981, 0, 0, 0.753709,0.165526) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.718117,0.063137) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.615129,0.0237355) , 
0, -0.853606, 0, 0, 0.646353,0.0778733) , 
3, -0.926931, 0, 0, 0.710427,0.130187) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.561936,0.0108479) , 
1, -0.371332, 0, 0, 0.688212,0.114428) , 
0, -0.820146, 0, 0, 0.804568,0.185784) , 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.613003,0.0364265) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.528645,0.0086986) , 
0, -0.942351, 0, 0, 0.586203,0.0613736) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.540692,0.00882192) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.422184,-0.0257883) , 
2, -0.93491, 0, 0, 0.475083,-0.0242955) , 
3, -0.946852, 0, 0, 0.550209,0.0336233) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.373852,-0.0357584) , 
2, -0.776459, 1, 0, 0.52143,0.0147053) , 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.39908,-0.0255422) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.283096,-0.0629216) , 
2, -0.961588, 0, 0, 0.374613,-0.0767373) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.299244,-0.0613658) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.252811,-0.0702683) , 
0, -0.972537, 0, 0, 0.275854,-0.151865) , 
2, -0.842745, 1, 0, 0.347157,-0.0976235) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.274813,-0.0585827) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.233476,-0.0768586) , 
4, 0.138761, 1, 0, 0.259689,-0.148848) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.201428,-0.0892333) , 
0, -0.997017, 0, 0, 0.245296,-0.161328) , 
0, -0.98747, 0, 0, 0.312355,-0.119389) , 
0, -0.956142, 0, 0, 0.398697,-0.0640121) , 
0, -0.907893, 0, 0, 0.635766,0.0818937)    );
  // itree = 3
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.917484,0.113001) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.832691,0.076718) , 
1, -0.0920857, 0, 0, 0.909083,0.200157) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.859453,0.0932214) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.787552,0.0607246) , 
3, -0.927952, 0, 0, 0.822098,0.148019) , 
2, -0.92897, 0, 0, 0.89414,0.191201) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.851764,0.0896278) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.768657,0.0569005) , 
3, -0.923911, 0, 0, 0.819764,0.153294) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.762739,0.0530741) , 
1, -0.156864, 0, 0, 0.806985,0.143265) , 
0, -0.736609, 0, 0, 0.867364,0.176474) , 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.759753,0.0654945) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.688525,0.0478354) , 
0, -0.89536, 0, 0, 0.747741,0.132411) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.709338,0.0508043) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.538402,-0.0117405) , 
3, -0.946059, 0, 0, 0.626862,0.0435647) , 
2, -0.929402, 0, 0, 0.711788,0.105986) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.523718,-0.00939278) , 
2, -0.733045, 1, 0, 0.689656,0.0909966) , 
0, -0.82017, 0, 0, 0.805867,0.146894) , 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.610938,0.030617) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.521002,0.00561163) , 
2, -0.934427, 0, 0, 0.583613,0.0515614) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.491311,0.00353477) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.411519,-0.0227918) , 
3, -0.942466, 0, 0, 0.46172,-0.0141789) , 
0, -0.937132, 0, 0, 0.512504,0.0132101) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.315167,-0.0508529) , 
2, -0.74008, 1, 0, 0.490394,-0.00102404) , 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.396885,-0.0212321) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.32123,-0.0412879) , 
2, -0.923878, 0, 0, 0.357651,-0.0720055) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.280863,-0.0480335) , 
2, -0.842226, 1, 0, 0.337388,-0.0813545) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.28472,-0.0421009) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.213942,-0.0718657) , 
1, -0.427078, 1, 0, 0.264887,-0.111158) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.212834,-0.0709025) , 
1, -0.764007, 0, 0, 0.253161,-0.121872) , 
0, -0.985378, 0, 0, 0.293781,-0.102332) , 
0, -0.969297, 0, 0, 0.402917,-0.0460977) , 
0, -0.907892, 0, 0, 0.637473,0.0662424)    );
  // itree = 4
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.931354,0.104092) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.861068,0.0771335) , 
0, -0.554892, 0, 0, 0.885207,0.147981) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.846276,0.0683044) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.726865,0.0283157) , 
2, -0.949318, 0, 0, 0.812673,0.103558) , 
3, -0.930232, 0, 0, 0.868212,0.137572) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.788518,0.0616961) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.720526,0.0411854) , 
0, -0.84428, 0, 0, 0.740846,0.0965645) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.573011,0.00692292) , 
2, -0.954134, 0, 0, 0.716955,0.0850376) , 
0, -0.814043, 0, 0, 0.817253,0.119873) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.514752,-0.0248648) , 
1, -0.428433, 0, 0, 0.805374,0.113056) , 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.638858,0.0356248) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.567119,0.0163251) , 
0, -0.917729, 0, 0, 0.584153,0.046363) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.500091,-0.00360671) , 
1, -0.170519, 1, 0, 0.560515,0.0309361) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.421934,-0.0137331) , 
1, -0.569902, 0, 0, 0.541439,0.022386) , 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.454878,-0.000241541) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.353189,-0.0316759) , 
1, -0.288975, 1, 0, 0.423712,-0.0223765) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.310767,-0.0414077) , 
2, -0.842123, 1, 0, 0.391878,-0.0420728) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.306195,-0.0338395) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.249694,-0.0492045) , 
2, -0.856499, 1, 0, 0.28942,-0.083439) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.236287,-0.0491582) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.214075,-0.0618917) , 
2, -0.911529, 0, 0, 0.225116,-0.115809) , 
0, -0.993893, 0, 0, 0.26905,-0.0936929) , 
0, -0.978622, 0, 0, 0.330705,-0.0677815) , 
0, -0.950116, 0, 0, 0.407604,-0.0348786) , 
0, -0.904762, 0, 0, 0.635676,0.0499435)    );
  // itree = 5
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.940497,0.0989324) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.861735,0.0658356) , 
0, -0.569524, 0, 0, 0.888214,0.120474) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.792773,0.0265272) , 
3, -0.538604, 1, 0, 0.881503,0.11511) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.854858,0.0673445) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.801926,0.0457963) , 
1, 0.274612, 0, 0, 0.831019,0.100051) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.698003,0.00385451) , 
2, -0.958628, 0, 0, 0.787208,0.0695529) , 
2, -0.929384, 0, 0, 0.864226,0.106763) , 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.773516,0.052073) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.701905,0.0283605) , 
0, -0.8512, 0, 0, 0.744061,0.0836708) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.656261,0.0148563) , 
3, -0.944581, 0, 0, 0.722934,0.0711437) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.674191,0.025958) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.653519,0.0131385) , 
1, -0.195185, 1, 0, 0.662779,0.0398774) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.624848,0.0086311) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.59692,-0.00371435) , 
4, 0.0519968, 0, 0, 0.609715,0.00411361) , 
0, -0.889991, 0, 0, 0.635818,0.0217062) , 
0, -0.870296, 0, 0, 0.680487,0.0470554) , 
0, -0.82017, 0, 0, 0.800196,0.0859561) , 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.621028,0.0276435) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.514064,0.00728797) , 
0, -0.935453, 0, 0, 0.563718,0.0369469) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.449302,-0.0122386) , 
1, -0.1207, 1, 0, 0.546783,0.0272433) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.396041,-0.019066) , 
1, -0.577969, 0, 0, 0.523538,0.016481) , 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.406389,-0.0024779) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.333706,-0.0213987) , 
1, -0.512704, 0, 0, 0.362143,-0.0299871) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.265615,-0.0367139) , 
2, -0.841972, 1, 0, 0.331447,-0.0453942) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.324295,-0.02086) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.291649,-0.0333176) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.198206,-0.067024) , 
2, -0.966611, 0, 0, 0.263348,-0.0940318) , 
3, -0.957749, 0, 0, 0.282112,-0.0787033) , 
3, -0.936627, 0, 0, 0.309529,-0.0601928) , 
0, -0.960526, 0, 0, 0.408628,-0.024688) , 
0, -0.907893, 0, 0, 0.636626,0.0397366)    );
  // itree = 6
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.928408,0.0835979) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.863985,0.058573) , 
1, -0.0668439, 0, 0, 0.917955,0.109334) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.891746,0.0660885) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.788916,0.0225894) , 
3, -0.949386, 0, 0, 0.872097,0.0841939) , 
2, -0.867104, 0, 0, 0.897179,0.0979441) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.789324,0.0404476) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.72027,0.0230498) , 
3, -0.918392, 0, 0, 0.770966,0.0650121) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.75531,0.0332004) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.60611,-0.00825348) , 
2, -0.908357, 0, 0, 0.665459,0.0147352) , 
3, -0.958201, 0, 0, 0.752955,0.0564297) , 
0, -0.723341, 0, 0, 0.817126,0.074901) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.512176,-0.0257192) , 
1, -0.428146, 0, 0, 0.804699,0.0694862) , 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.607105,0.024976) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.59117,0.0180417) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.559767,0.00490105) , 
4, 0.159459, 0, 0, 0.57679,0.026299) , 
4, -0.245124, 1, 0, 0.586317,0.0360646) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.515862,0.00746708) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.393122,-0.0166022) , 
2, -0.835342, 1, 0, 0.472415,-0.00224179) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.396134,-0.0259555) , 
1, -0.199182, 1, 0, 0.458921,-0.0123431) , 
0, -0.928953, 0, 0, 0.500887,0.00360279) , 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.396734,-0.0054871) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.308339,-0.0289461) , 
2, -0.916122, 0, 0, 0.345619,-0.0414302) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.264623,-0.0296422) , 
2, -0.841914, 1, 0, 0.324468,-0.0468879) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.289919,-0.0167957) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.215969,-0.0437166) , 
1, -0.470049, 1, 0, 0.253945,-0.0603087) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.219968,-0.0461979) , 
1, -0.648512, 0, 0, 0.240369,-0.0728368) , 
0, -0.987907, 0, 0, 0.288932,-0.0578525) , 
0, -0.968255, 0, 0, 0.407435,-0.023493) , 
0, -0.904762, 0, 0, 0.637009,0.0302385)    );
  // itree = 7
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.925117,0.0756105) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.894902,0.0570725) , 
3, -0.805746, 0, 0, 0.907038,0.0826905) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.821106,0.042482) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.695322,0.0202128) , 
0, -0.84939, 0, 0, 0.766946,0.057456) , 
0, -0.732425, 0, 0, 0.832072,0.0691871) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.799779,0.0394637) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.751599,0.0166401) , 
4, -0.322129, 1, 0, 0.771478,0.0442977) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.588316,-0.0132832) , 
2, -0.95341, 0, 0, 0.713618,0.0214332) , 
3, -0.949624, 0, 0, 0.810877,0.0606424) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.668773,-0.026461) , 
2, -0.59792, 1, 0, 0.804253,0.0557074) , 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.630352,0.020166) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.506373,0.00156683) , 
0, -0.919589, 0, 0, 0.525136,0.00949778) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.392431,-0.0169366) , 
2, -0.958559, 0, 0, 0.504347,0.00201195) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.321782,-0.0300123) , 
2, -0.721037, 1, 0, 0.48685,-0.00444096) , 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.407416,-0.00068069) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.332748,-0.0164196) , 
2, -0.90216, 0, 0, 0.356524,-0.0249205) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.267638,-0.0235802) , 
2, -0.842745, 1, 0, 0.332384,-0.031024) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.272326,-0.0177384) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.246025,-0.0288711) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.205971,-0.0418665) , 
3, -0.96675, 0, 0, 0.226726,-0.0672924) , 
3, -0.92245, 0, 0, 0.247071,-0.0530791) , 
0, -0.986842, 0, 0, 0.292638,-0.041299) , 
0, -0.969298, 0, 0, 0.401306,-0.0206757) , 
0, -0.907893, 0, 0, 0.636398,0.0238887)    );
  // itree = 8
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.931792,0.0752524) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.909212,0.0575405) , 
4, 0.200367, 0, 0, 0.91943,0.0774115) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.935788,0.0720213) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.868015,0.0393911) , 
0, -0.424701, 0, 0, 0.879774,0.0573558) , 
2, -0.855613, 0, 0, 0.898428,0.06679) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.86254,0.0388867) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.74094,0.00585258) , 
2, -0.917234, 0, 0, 0.801138,0.0313496) , 
3, -0.939726, 0, 0, 0.878651,0.0595855) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.781651,0.0116144) , 
1, -0.165616, 0, 0, 0.869807,0.0558407) , 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.763042,0.0284862) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.610945,0.0112062) , 
0, -0.900244, 0, 0, 0.712284,0.0430374) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.659323,0.00646832) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.545425,-0.0162098) , 
3, -0.97608, 0, 0, 0.64723,0.00797363) , 
3, -0.832523, 0, 0, 0.664952,0.0175261) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.498488,-0.0126949) , 
2, -0.733029, 1, 0, 0.645607,0.0122111) , 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.458893,0.00165338) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.388328,-0.0163881) , 
1, -0.251316, 1, 0, 0.44225,-0.00569205) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.298366,-0.0131803) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.211955,-0.0331268) , 
0, -0.996546, 0, 0, 0.284422,-0.0321109) , 
0, -0.975817, 0, 0, 0.367302,-0.0182376) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.251035,-0.0367621) , 
2, -0.73978, 1, 0, 0.357679,-0.0226636) , 
0, -0.936517, 0, 0, 0.501426,-0.00525249) , 
0, -0.809524, 0, 0, 0.634812,0.0168686)    );
  // itree = 9
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.95986,0.0863819) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.928413,0.0624576) , 
2, -0.821369, 0, 0, 0.941954,0.0721136) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.904564,0.0482495) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.814363,0.0160026) , 
3, -0.944803, 0, 0, 0.889884,0.0493629) , 
0, -0.395083, 0, 0, 0.902281,0.0547795) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.784064,0.026892) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.75972,0.0132971) , 
4, 0.14216, 0, 0, 0.770184,0.0323779) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.636098,-0.00770234) , 
3, -0.969103, 0, 0, 0.755946,0.0272864) , 
0, -0.723341, 0, 0, 0.823635,0.0400036) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.69221,0.0160565) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.513968,-0.0381996) , 
2, -0.716612, 1, 0, 0.597182,-0.0291002) , 
1, -0.332936, 0, 0, 0.80517,0.034369) , 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.619549,0.0136084) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.464407,0.000442511) , 
0, -0.928943, 0, 0, 0.507486,0.00886032) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.436737,0.000138869) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.398736,-0.0189223) , 
1, -0.184417, 1, 0, 0.417441,-0.0214239) , 
3, -0.967793, 0, 0, 0.491398,0.00344948) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.316337,-0.0201073) , 
2, -0.720899, 1, 0, 0.475452,-0.00070046) , 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.315459,0.00129237) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.299318,-0.0139256) , 
2, -0.927622, 1, 0, 0.306776,-0.01403) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.247506,-0.0200341) , 
3, -0.966505, 0, 0, 0.289279,-0.0212013) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.259553,-0.0229691) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.208153,-0.0329642) , 
0, -0.989206, 0, 0, 0.234106,-0.0529966) , 
2, -0.862731, 1, 0, 0.272451,-0.030899) , 
0, -0.977325, 0, 0, 0.407525,-0.0108054) , 
0, -0.904762, 0, 0, 0.635914,0.0151407)    );
  // itree = 10
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.960425,0.0774874) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.834753,0.0311526) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.817554,0.0214309) , 
3, -0.806403, 0, 0, 0.823744,0.0353632) , 
0, -0.246795, 0, 0, 0.831228,0.036995) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.773415,0.0274901) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.713603,-0.00266901) , 
4, -0.330866, 1, 0, 0.738647,0.0163506) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.586724,-0.0177771) , 
2, -0.970161, 0, 0, 0.70482,0.00444634) , 
2, -0.936629, 0, 0, 0.807537,0.030895) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.675557,-0.0208314) , 
2, -0.611588, 1, 0, 0.800515,0.0273986) , 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.548719,0.0209001) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.506984,0.000999322) , 
4, -0.301641, 1, 0, 0.513923,0.00969415) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.457784,-0.0131887) , 
4, -0.518144, 0, 0, 0.50701,0.00481329) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.355227,0.00520565) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.297457,-0.0101055) , 
2, -0.916944, 0, 0, 0.32935,-0.0029868) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.287269,-0.013894) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.252047,-0.0292679) , 
4, 0.0445676, 1, 0, 0.270426,-0.043307) , 
1, -0.403999, 1, 0, 0.305619,-0.0192253) , 
0, -0.969959, 0, 0, 0.432305,-0.00410365) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.396325,0.0138975) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.303132,-0.0229244) , 
2, -0.797213, 1, 0, 0.348133,-0.010722) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.252864,-0.0181258) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.226702,-0.0315329) , 
4, 0.0745481, 0, 0, 0.236993,-0.0504807) , 
3, -0.809838, 0, 0, 0.287312,-0.0324798) , 
1, -0.630481, 0, 0, 0.397682,-0.0108796) , 
0, -0.909877, 0, 0, 0.634995,0.0116704)    );
  // itree = 11
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.911634,0.0324126) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.90986,0.0407462) , 
4, 0.521236, 0, 0, 0.910384,0.0376171) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.903328,0.0226641) , 
4, -0.618513, 0, 0, 0.909283,0.0350234) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.8139,0.0107674) , 
2, -0.935043, 0, 0, 0.896046,0.0322732) , 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.887002,0.0495386) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.813306,0.0151629) , 
3, -0.833133, 0, 0, 0.837459,0.0357594) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.712652,-0.00725045) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.663068,0.00815104) , 
3, -0.671088, 0, 0, 0.66954,0.0119064) , 
1, -0.115092, 0, 0, 0.712186,0.0179643) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.821193,0.0307967) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.629976,0.00981128) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.498653,-0.00549412) , 
3, -0.913576, 0, 0, 0.511957,-0.00833679) , 
0, -0.776359, 0, 0, 0.53359,-0.0045714) , 
3, -0.899166, 0, 0, 0.607248,0.00472299) , 
0, -0.723666, 0, 0, 0.692562,0.0128615) , 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.455505,0.0120235) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.374092,-0.00283479) , 
2, -0.803052, 1, 0, 0.414484,0.00989325) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.381622,-0.011761) , 
4, 0.102813, 1, 0, 0.402067,-0.00352991) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.277987,-0.00824829) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.186432,-0.0368536) , 
2, -0.843149, 1, 0, 0.244279,-0.0341423) , 
0, -0.982702, 0, 0, 0.327704,-0.0179571) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.309565,-0.0330013) , 
2, -0.682468, 1, 0, 0.324434,-0.0268863) , 
1, -0.524092, 0, 0, 0.632871,0.00641653)    );
  // itree = 12
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.958567,0.0752158) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.930752,0.0397369) , 
4, -0.329956, 0, 0, 0.94451,0.0462191) , 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.849097,0.0258109) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.810147,0.0114758) , 
4, 0.139646, 0, 0, 0.826965,0.0232151) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.789399,0.00933537) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.604058,-0.0067163) , 
2, -0.97015, 0, 0, 0.77266,0.0114989) , 
2, -0.882453, 0, 0, 0.801068,0.017628) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.668863,-0.0140339) , 
2, -0.611588, 1, 0, 0.794221,0.0154738) , 
0, -0.360544, 0, 0, 0.807293,0.018148) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.571226,0.0126517) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.567293,-0.000826103) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.54617,0.0166768) , 
0, -0.930031, 0, 0, 0.557454,0.0159286) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.512084,-0.00625158) , 
1, -0.199154, 1, 0, 0.544726,0.00743635) , 
4, -0.42796, 1, 0, 0.549448,0.0112925) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.367396,0.0172493) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.354713,-0.00534183) , 
1, -0.428323, 1, 0, 0.360862,0.0109727) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.371448,0.000265467) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.352611,-0.0140714) , 
1, -0.36557, 1, 0, 0.365071,-0.00973258) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.272541,-0.0086821) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.242148,-0.0256841) , 
4, -0.0697289, 1, 0, 0.256677,-0.0340263) , 
1, -0.658306, 0, 0, 0.334788,-0.0165198) , 
4, 0.32945, 0, 0, 0.340344,-0.0106615) , 
0, -0.945581, 0, 0, 0.408622,-0.00349289) , 
0, -0.904762, 0, 0, 0.637851,0.00895023)    );
  // itree = 13
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.947135,0.0624087) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.938511,0.050264) , 
4, 0.305461, 1, 0, 0.94324,0.0471519) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.91947,0.0287799) , 
3, -0.705724, 1, 0, 0.935389,0.0395052) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.950875,0.051394) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.913226,0.0176754) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.840035,0.0029668) , 
3, -0.90841, 0, 0, 0.874816,0.00870913) , 
2, -0.87416, 0, 0, 0.898936,0.0171785) , 
1, 0.335999, 1, 0, 0.918775,0.0293296) , 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.84056,0.0231114) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.80565,0.00738961) , 
4, -0.509077, 0, 0, 0.825002,0.0218142) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.820206,0.0100588) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.758557,-0.014801) , 
4, 0.127696, 0, 0, 0.811302,0.00848358) , 
4, -0.143287, 1, 0, 0.817557,0.01457) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.574435,0.0178987) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.484489,-0.000128857) , 
4, -0.498187, 1, 0, 0.493308,0.00340202) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.399544,-0.00507006) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.386529,-0.0202706) , 
4, -0.423459, 0, 0, 0.396163,-0.0190582) , 
2, -0.944426, 0, 0, 0.470169,-0.00194789) , 
0, -0.854883, 0, 0, 0.590345,0.00376636) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.43667,-0.0338362) , 
2, -0.610879, 1, 0, 0.584858,0.00123913) , 
0, -0.619048, 0, 0, 0.636207,0.00555881)    );
  // itree = 14
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.925171,0.032909) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.920164,0.041877) , 
4, 0.330371, 0, 0, 0.922749,0.0324671) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.917556,0.0239966) , 
4, -0.525759, 0, 0, 0.921592,0.029614) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.928119,0.0362083) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.853294,0.0127146) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.756081,0.000749584) , 
2, -0.906444, 0, 0, 0.8017,0.00767465) , 
0, -0.439052, 0, 0, 0.818029,0.0103854) , 
3, -0.819334, 0, 0, 0.845119,0.0154153) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.566983,0.00124952) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.430776,-0.0153596) , 
3, -0.963685, 0, 0, 0.49773,-0.0159002) , 
0, -0.888819, 0, 0, 0.806907,0.0119706) , 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.674179,0.0103294) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.661222,-0.00102484) , 
4, 0.51672, 1, 0, 0.671018,0.0142791) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.669088,-0.00659577) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.561301,0.00860069) , 
1, -0.387247, 0, 0, 0.636908,-0.00313094) , 
4, 0.156152, 0, 0, 0.649132,0.00310819) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.415227,0.0126759) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.336073,-0.007047) , 
3, -0.798712, 0, 0, 0.344429,-0.0101503) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.252074,-0.0179189) , 
2, -0.799986, 1, 0, 0.330313,-0.0137031) , 
0, -0.949117, 0, 0, 0.481188,-0.0057475) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.449002,-0.0294531) , 
2, -0.6185, 1, 0, 0.479179,-0.0088849) , 
1, -0.142826, 0, 0, 0.632443,0.000868303)    );
  // itree = 15
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.94269,0.0429707) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.922794,0.0203314) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.905078,0.0359712) , 
2, -0.751219, 1, 0, 0.915926,0.0221474) , 
4, 0.392387, 0, 0, 0.925272,0.0252332) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.910035,0.0287483) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.885155,0.0152683) , 
1, 0.274163, 1, 0, 0.891926,0.0179936) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.876011,-0.00453962) , 
1, 0.153065, 0, 0, 0.889186,0.0141646) , 
3, -0.808699, 0, 0, 0.902786,0.0183362) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.690589,-0.0179164) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.783976,0.0151858) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.761672,0.00439708) , 
4, -0.139555, 1, 0, 0.771442,0.0145222) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.606804,-0.0111866) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.436471,0.00273238) , 
0, -0.911894, 0, 0, 0.463501,0.00122025) , 
0, -0.891158, 0, 0, 0.594363,0.00687301) , 
1, 0.164772, 0, 0, 0.599223,0.00497284) , 
0, -0.714283, 0, 0, 0.679666,0.00851407) , 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.357354,-0.0102667) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.333503,0.0102447) , 
1, -0.709859, 0, 0, 0.341861,0.00561926) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.219768,-0.0162792) , 
3, -0.884549, 0, 0, 0.307493,-0.00407549) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.274253,-0.0260467) , 
2, -0.673775, 1, 0, 0.300839,-0.0132944) , 
1, -0.618975, 0, 0, 0.639141,0.00618114)    );
  // itree = 16
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.934883,0.0276419) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.634695,0.0193083) , 
1, -0.0979041, 0, 0, 0.775298,0.0266415) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.767242,-0.00129731) , 
3, -0.680624, 1, 0, 0.77235,0.0163092) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.899535,0.0101848) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.589236,-0.0215545) , 
1, -0.0315633, 0, 0, 0.73897,-0.0159154) , 
2, -0.852952, 0, 0, 0.756734,0.00123433) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.899083,0.0199513) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.760675,-0.0140319) , 
3, -0.941921, 0, 0, 0.836346,0.000475036) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.696408,0.020909) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.639725,0.00604695) , 
4, 0.67184, 1, 0, 0.686168,0.0327602) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.325892,0.0135759) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.273875,-0.0135307) , 
1, -0.425768, 1, 0, 0.300023,-0.000528725) , 
0, -0.966218, 0, 0, 0.585644,0.0240943) , 
1, 0.223188, 0, 0, 0.642277,0.0187588) , 
3, -0.864508, 0, 0, 0.686448,0.0119958) , 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.819781,0.0320334) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.806752,0.00926329) , 
3, -0.671093, 1, 0, 0.814934,0.028554) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.790765,0.00247875) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.605962,0.00987686) , 
1, -0.120083, 0, 0, 0.75948,0.00602674) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.453144,-0.0109837) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.346348,0.000285217) , 
1, -0.41946, 0, 0, 0.404436,-0.0124753) , 
1, -0.23804, 0, 0, 0.664008,0.0010515) , 
3, -0.790716, 0, 0, 0.694179,0.00654941) , 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.775347,0.00209396) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.709147,-0.0200043) , 
4, -0.140371, 1, 0, 0.73626,-0.0175966) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.618887,0.0180761) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.577922,0.00258128) , 
4, 0.13679, 0, 0, 0.585799,0.0109393) , 
1, -0.183741, 0, 0, 0.646562,-0.000584762) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.376735,-0.0113246) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.296702,-0.000826767) , 
1, -0.703911, 0, 0, 0.355363,-0.017855) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.320012,-0.0212523) , 
2, -0.721002, 1, 0, 0.347383,-0.0232996) , 
1, -0.434888, 0, 0, 0.523573,-0.00992254) , 
4, -0.291888, 1, 0, 0.61,-0.00157798) , 
4, 0.237766, 0, 0, 0.637524,0.00330901)    );
  // itree = 17
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.94283,0.0179343) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.904978,-0.00392151) , 
1, 0.165771, 0, 0, 0.923754,0.0035167) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.953065,0.0550388) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.923223,0.0279626) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.880425,0.00915733) , 
1, 0.432042, 1, 0, 0.902062,0.0153167) , 
3, -0.862982, 0, 0, 0.915448,0.0210853) , 
3, -0.808566, 0, 0, 0.918718,0.0141689) , 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.667744,0.00908955) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.666039,-0.0028758) , 
2, -0.853873, 1, 0, 0.66755,0.0131372) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.596793,-0.00685366) , 
2, -0.942477, 0, 0, 0.660559,0.0105853) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.828835,-0.00380774) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.529738,0.015952) , 
0, -0.836605, 0, 0, 0.687032,0.0124035) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.736785,-5.09808e-05) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.347021,-0.00999955) , 
0, -0.909302, 0, 0, 0.57777,-0.00834865) , 
4, -0.274782, 1, 0, 0.602583,-0.00363581) , 
2, -0.839102, 1, 0, 0.636244,0.00462092) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.540635,-0.0153979) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.582515,0.00940407) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.584949,0.00296418) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.498284,-0.00515732) , 
4, -0.557655, 1, 0, 0.513295,-0.00723364) , 
4, 0.548286, 0, 0, 0.520074,-0.00478387) , 
4, 0.711458, 0, 0, 0.521351,-0.00635941) , 
3, -0.911362, 0, 0, 0.583884,-0.000383173) , 
0, -0.619047, 0, 0, 0.635274,0.00185028)    );
  // itree = 18
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.955042,0.0432047) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.650076,0.00200748) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.451702,-0.00734203) , 
2, -0.96508, 0, 0, 0.637849,0.00217848) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.690061,0.0317936) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.578029,-0.00185563) , 
4, 0.159191, 0, 0, 0.618333,0.0149058) , 
2, -0.706055, 1, 0, 0.636352,0.00315481) , 
0, -0.284414, 0, 0, 0.647438,0.00390341) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.356677,-0.0215534) , 
2, -0.978033, 0, 0, 0.637424,0.00225596) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.552025,-0.0297954) , 
2, -0.53867, 1, 0, 0.635499,0.00110922)    );
  // itree = 19
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.961951,0.0534054) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.932559,0.0182093) , 
3, -0.870566, 0, 0, 0.949232,0.0224565) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.928038,0.0203128) , 
3, -0.70786, 1, 0, 0.941966,0.0195872) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.901842,0.0171563) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.887593,-0.00561138) , 
4, -0.522773, 1, 0, 0.893068,0.00256268) , 
2, -0.866986, 0, 0, 0.921413,0.0124314) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.606436,-0.0131458) , 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.768278,0.024873) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.68366,0.00496672) , 
4, -0.462184, 1, 0, 0.725442,0.0222467) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.713682,0.00839248) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.325806,-0.00590138) , 
0, -0.945587, 0, 0, 0.584369,0.00595195) , 
3, -0.880277, 0, 0, 0.641203,0.0125166) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.645889,0.00544825) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.527192,-0.0051091) , 
4, 0.127884, 0, 0, 0.591152,0.000440917) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.522624,-0.00283343) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.348827,-0.0225567) , 
3, -0.966106, 0, 0, 0.472749,-0.016924) , 
2, -0.932878, 0, 0, 0.563158,-0.00366468) , 
4, -0.306946, 1, 0, 0.583142,0.000478674) , 
4, -0.714661, 1, 0, 0.583981,-0.000391301) , 
0, -0.619048, 0, 0, 0.636612,0.0016087)    );
  // itree = 20
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.926164,0.00919581) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.918278,0.0193901) , 
2, -0.751745, 0, 0, 0.920018,0.0129882) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.842462,0.00326538) , 
3, -0.939781, 0, 0, 0.906459,0.0113832) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.836197,0.00569779) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.794099,-0.013133) , 
4, -0.427372, 1, 0, 0.809144,-0.00870116) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.693511,-0.0114076) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.560809,0.0163808) , 
1, 0.170747, 0, 0, 0.622031,0.00951469) , 
2, -0.953348, 0, 0, 0.748125,-0.00276085) , 
2, -0.893613, 0, 0, 0.820974,0.00374683) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.861378,0.00268568) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.653231,0.0188677) , 
0, -0.82324, 0, 0, 0.729021,0.0240862) , 
1, -0.0884343, 0, 0, 0.809626,0.00625697) , 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.701521,0.0123612) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.653804,-0.0103153) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.494089,-0.000154372) , 
2, -0.831626, 0, 0, 0.527218,-0.00413549) , 
2, -0.727999, 0, 0, 0.539765,-0.00225768) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.397819,0.00366256) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.392399,0.0181579) , 
1, -0.593674, 0, 0, 0.394485,0.0250917) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.310393,0.00677301) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.285102,-0.00879192) , 
4, -0.0532202, 1, 0, 0.296454,-0.00339272) , 
1, -0.679206, 0, 0, 0.341628,0.00973314) , 
1, -0.550947, 0, 0, 0.489303,0.000796162) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.45968,-0.011898) , 
2, -0.619048, 1, 0, 0.487412,-0.000684814) , 
1, -0.142857, 0, 0, 0.637637,0.00255164)    );
  // itree = 21
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.873658,0.0149371) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.871826,-0.0145785) , 
3, -0.74811, 1, 0, 0.872723,0.000853415) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.85023,0.0299709) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.82123,0.00949175) , 
4, 0.143047, 0, 0, 0.828378,0.0180508) , 
4, 0.410627, 0, 0, 0.839459,0.0137536) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.80807,-0.0178692) , 
3, -0.551005, 1, 0, 0.835596,0.00953294) , 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.933674,0.0194532) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.887709,-0.00903509) , 
3, -0.912652, 0, 0, 0.920969,0.00695887) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.871932,0.017674) , 
3, -0.94487, 0, 0, 0.910269,0.00956335) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.797461,-1.35331e-05) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.547766,-0.00643882) , 
0, -0.859244, 0, 0, 0.681502,-0.00621323) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.53657,0.0154535) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.428006,-0.000399942) , 
1, -0.304257, 0, 0, 0.447081,0.00483951) , 
1, -0.267662, 0, 0, 0.606938,-0.0026976) , 
0, -0.631567, 0, 0, 0.65351,-0.000815098) , 
3, -0.809524, 0, 0, 0.695257,0.00155736) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.45661,-0.000711607) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.317897,-0.0160251) , 
0, -0.951319, 0, 0, 0.382651,-0.0181818) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.324823,-0.0106641) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.303464,0.0110879) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.228071,-0.00854406) , 
0, -0.992191, 0, 0, 0.277269,0.00822811) , 
1, -0.591902, 0, 0, 0.291735,-0.00105915) , 
3, -0.815564, 0, 0, 0.332326,-0.00870378) , 
1, -0.52381, 0, 0, 0.635869,-0.000121692)    );
  // itree = 22
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.907432,0.0223327) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.882598,-0.00573585) , 
3, -0.595673, 1, 0, 0.896028,0.00779985) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.62972,-0.0217737) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.392743,-0.000615338) , 
1, -0.605094, 0, 0, 0.517152,-0.0224274) , 
1, -0.30887, 0, 0, 0.700398,-0.00780778) , 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.867278,-0.00671491) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.669518,0.0062812) , 
1, 0.336556, 0, 0, 0.717451,0.00613016) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.683774,-0.00782386) , 
4, 0.557385, 0, 0, 0.711508,0.0029915) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.86025,0.0282376) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.508554,0.000775961) , 
1, -0.102939, 0, 0, 0.694095,0.0172335) , 
4, 0.510776, 0, 0, 0.707235,0.00648639) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.749147,0.0188421) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.862768,0.0151504) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.59407,-0.00437125) , 
1, 0.214381, 0, 0, 0.720032,0.00350561) , 
4, -0.70659, 0, 0, 0.728981,0.0108481) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.666689,0.000799675) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.659395,0.0104148) , 
3, -0.839908, 0, 0, 0.665019,0.00480703) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.57315,0.0108337) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.547745,-0.00370646) , 
2, -0.713767, 0, 0, 0.549726,-0.00490245) , 
3, -0.86553, 0, 0, 0.592399,-0.00130872) , 
4, -0.658048, 1, 0, 0.606807,-2.62728e-05) , 
4, 0.429199, 0, 0, 0.630193,0.00149025) , 
3, -0.686235, 0, 0, 0.636975,0.000591959)    );
  // itree = 23
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.672691,-0.0110196) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.789341,0.0246595) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.855861,0.0199413) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.843697,0.00466397) , 
3, -0.652244, 1, 0, 0.849047,0.0128242) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.394538,-0.00512285) , 
1, -0.5221, 0, 0, 0.714255,0.00587998) , 
2, -0.836145, 1, 0, 0.734706,0.0131093) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.788244,-0.0242083) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.617835,0.00113746) , 
2, -0.933229, 0, 0, 0.700382,-0.012167) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.837624,0.00246527) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.64731,0.0198899) , 
3, -0.973455, 0, 0, 0.824735,0.00519003) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.50104,-0.00879829) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.499507,0.000108714) , 
4, 0.508811, 0, 0, 0.499676,-0.00167333) , 
1, -0.0479939, 0, 0, 0.620365,0.000874934) , 
4, -0.712593, 1, 0, 0.624679,0.000171837) , 
3, -0.721808, 0, 0, 0.636245,0.00153183) , 
3, -0.513116, 0, 0, 0.63726,0.00101864)    );
  // itree = 24
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.922019,-0.0130743) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.852355,0.00150808) , 
1, -0.0786304, 0, 0, 0.890151,-0.0034426) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.684293,-0.0225721) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.491169,-0.0155169) , 
1, -0.471884, 0, 0, 0.585193,-0.0364998) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.359183,0.00193048) , 
1, -0.700274, 0, 0, 0.508059,-0.0227088) , 
1, -0.300647, 0, 0, 0.692741,-0.0133966) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.684005,0.0226394) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.838647,-0.00526914) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.671698,0.00632427) , 
3, -0.809537, 0, 0, 0.693319,0.00826574) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.296387,-0.0123921) , 
1, -0.528975, 0, 0, 0.65349,0.00497063) , 
2, -0.729707, 0, 0, 0.655831,0.00700851) , 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.735294,-0.00465515) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.566872,0.013435) , 
4, -0.127865, 1, 0, 0.689177,0.00230008) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.657831,-0.00369992) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.628587,-0.0188779) , 
2, -0.851215, 1, 0, 0.647392,-0.0139542) , 
3, -0.823773, 0, 0, 0.666662,-0.00645801) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.910185,0.0230182) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.791017,-0.0114087) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.461843,0.00119741) , 
0, -0.820497, 0, 0, 0.523584,-0.00097217) , 
0, -0.622804, 0, 0, 0.559838,0.000938411) , 
3, -0.891157, 0, 0, 0.605204,-0.00220267) , 
4, 0.142857, 0, 0, 0.626576,0.00168574) , 
3, -0.714286, 0, 0, 0.634745,-0.000176471)    );
  // itree = 25
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.800923,-0.0151352) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.77285,0.00502234) , 
3, -0.576891, 0, 0, 0.774277,0.00565184) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.842184,0.00894261) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.537338,-0.00296111) , 
1, 0.25858, 0, 0, 0.593086,-0.00273803) , 
2, -0.916063, 0, 0, 0.707796,0.00257351) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.471049,0.0111134) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.305413,-0.00573884) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.209261,-0.0179016) , 
0, -0.995354, 0, 0, 0.288231,-0.0146055) , 
0, -0.951196, 0, 0, 0.327753,-0.0061775) , 
1, -0.529663, 0, 0, 0.648145,0.00119996) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.374919,-0.013049) , 
2, -0.97779, 0, 0, 0.638401,0.000214439) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.537201,-0.0215044) , 
2, -0.545623, 1, 0, 0.635981,-0.000641913)    );
  // itree = 26
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.745923,0.0151477) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.656591,-0.00011784) , 
2, -0.708996, 1, 0, 0.706394,0.0122799) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.952999,0.0257852) , 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.893219,-0.000547953) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.856746,-0.0159129) , 
2, -0.761416, 1, 0, 0.885541,-0.0035092) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.839047,-0.038894) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.823756,-0.00517516) , 
3, -0.897209, 0, 0, 0.826636,-0.0121536) , 
3, -0.873012, 0, 0, 0.855194,-0.00796265) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.669437,0.0149196) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.649408,0.00131627) , 
4, -0.617939, 1, 0, 0.651115,0.00484215) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.348611,-0.00132137) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.3351,-0.0138814) , 
1, -0.218049, 1, 0, 0.347408,-0.00502766) , 
0, -0.939536, 0, 0, 0.496197,-0.000192344) , 
0, -0.818605, 0, 0, 0.620074,-0.00287359) , 
0, -0.238095, 0, 0, 0.628994,-0.00245014) , 
3, -0.619048, 0, 0, 0.633673,-0.00155969)    );
  // itree = 27
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.851778,0.0178309) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.831257,0.00405432) , 
4, 0.595846, 0, 0, 0.834934,0.00725216) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.879516,0.0170394) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.726206,-0.0116913) , 
1, 0.310428, 0, 0, 0.791853,-0.00291318) , 
4, 0.671934, 1, 0, 0.823889,0.00464603) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.723571,0.022503) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.560935,0.00584017) , 
1, -0.259353, 0, 0, 0.638569,0.0240615) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.599773,-0.00334571) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.551806,0.0118238) , 
4, 0.563003, 1, 0, 0.576265,0.00777815) , 
4, 0.427111, 1, 0, 0.6107,0.0167778) , 
1, -0.0994409, 0, 0, 0.737533,0.00956026) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.403512,-0.0110509) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.33237,0.00924539) , 
1, -0.596503, 0, 0, 0.36684,-0.00204092) , 
1, -0.435302, 0, 0, 0.668052,0.00738579) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.920494,0.000776605) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.778242,-0.0269776) , 
3, -0.924326, 0, 0, 0.859451,-0.0144469) , 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.744846,0.00293043) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.602839,0.011531) , 
1, -0.249563, 0, 0, 0.729943,0.00629586) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.651287,-0.0105629) , 
4, -0.0757613, 1, 0, 0.718521,0.00265198) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.512079,-0.0185408) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.416997,-0.00421479) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.369722,0.0054588) , 
2, -0.894231, 0, 0, 0.402991,-0.00264639) , 
1, -0.332965, 0, 0, 0.413356,-0.00598271) , 
1, -0.299616, 0, 0, 0.577354,-0.00134236) , 
1, 0.225623, 0, 0, 0.612263,-0.00296402) , 
4, 0.141792, 0, 0, 0.635652,0.00137512)    );
  // itree = 28
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.892558,0.00932023) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.759993,0.021916) , 
2, -0.886715, 0, 0, 0.830853,0.0206519) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.93081,0.0282577) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.783688,0.00441213) , 
2, -0.840296, 0, 0, 0.812956,0.00875927) , 
4, -0.490601, 0, 0, 0.818346,0.0123412) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.700352,-0.0140092) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.434082,-0.0012598) , 
3, -0.886097, 0, 0, 0.542153,-0.0116637) , 
1, -0.164842, 0, 0, 0.746745,0.00611813) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.403445,0.0120063) , 
1, -0.43428, 0, 0, 0.706084,0.00823128) , 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.788427,-0.000230744) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.431012,0.00264449) , 
0, -0.912901, 0, 0, 0.651712,0.00192685) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.299806,-0.0108531) , 
1, -0.647129, 0, 0, 0.637389,0.000980284) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.319363,0.0111579) , 
1, -0.727828, 0, 0, 0.626926,0.00164714) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.260497,-0.0073462) , 
1, -0.812623, 0, 0, 0.609451,0.000924866) , 
4, -0.332017, 1, 0, 0.638423,0.00311546)    );
  // itree = 29
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.713882,0.00466844) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.639459,-0.0126785) , 
2, -0.692496, 1, 0, 0.697639,0.0010062) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.825455,0.00432495) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.61978,0.0109672) , 
4, 0.450855, 0, 0, 0.673497,0.0142461) , 
4, -0.0626798, 1, 0, 0.684521,0.0082003) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.828085,-0.00852907) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.783984,0.0199008) , 
3, -0.872265, 0, 0, 0.803693,0.0113557) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.72623,-0.0224195) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.662079,-0.000746703) , 
4, 0.541216, 0, 0, 0.665907,-0.00294055) , 
4, 0.618247, 0, 0, 0.681111,-0.00136298) , 
2, -0.832626, 0, 0, 0.682308,0.00199319) , 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.63622,0.00220547) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.454043,-0.0124645) , 
3, -0.971059, 0, 0, 0.55569,-0.00898565) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.476837,0.012028) , 
4, -0.3478, 1, 0, 0.535884,-0.00092358) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.624833,0.00443911) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.492296,-0.00829424) , 
3, -0.960533, 0, 0, 0.536164,-0.00789536) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.37267,-0.019433) , 
4, 0.182213, 0, 0, 0.495117,-0.0155041) , 
4, -0.143983, 1, 0, 0.51312,-0.00906537) , 
3, -0.944746, 0, 0, 0.63682,-0.000979987) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.538845,-0.0191053) , 
2, -0.538267, 1, 0, 0.634506,-0.00171513)    );
  // itree = 30
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.778642,0.0244631) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.736585,-0.000124799) , 
4, 0.0304995, 1, 0, 0.75809,0.0164718) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.760446,0.00386219) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.707496,-0.0124219) , 
2, -0.80573, 1, 0, 0.729852,-0.00803351) , 
3, -0.66839, 1, 0, 0.746436,0.006358) , 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.804474,-0.00469485) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.775662,0.025518) , 
3, -0.885659, 0, 0, 0.789311,0.0156399) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.631243,-0.0117597) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.620942,-0.0025971) , 
2, -0.838708, 1, 0, 0.625149,-0.0101668) , 
4, 0.446467, 0, 0, 0.653618,-0.00569142) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.64274,-6.40803e-05) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.503984,0.00744449) , 
2, -0.957807, 0, 0, 0.619541,0.00234358) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.375128,-0.0105391) , 
2, -0.976683, 0, 0, 0.601704,0.000631186) , 
2, -0.877583, 0, 0, 0.619608,-0.00154937) , 
3, -0.75987, 0, 0, 0.637804,-0.000414928) , 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.923123,0.00837407) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.747312,0.0155684) , 
1, -0.127372, 0, 0, 0.824205,0.0172957) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.31729,-0.0109715) , 
1, -0.523862, 0, 0, 0.636396,0.00274327) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.593807,0.0282888) , 
3, -0.911313, 0, 0, 0.626941,0.0119507) , 
2, -0.714286, 1, 0, 0.636653,0.000895775)    );
  // itree = 31
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.80124,0.0165327) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.787354,0.00278843) , 
4, -0.079862, 0, 0, 0.794822,0.0134166) , 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.807651,0.00811652) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.716621,-0.00142479) , 
4, 0.617877, 0, 0, 0.72605,-0.000935819) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.577555,0.0230205) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.476036,-0.0092079) , 
2, -0.964198, 0, 0, 0.529257,0.014737) , 
2, -0.95722, 0, 0, 0.710631,0.000292218) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.406656,-0.0144151) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.40453,0.00161134) , 
4, -0.235739, 1, 0, 0.405418,-0.0102192) , 
2, -0.970553, 0, 0, 0.687322,-0.000510521) , 
2, -0.690801, 0, 0, 0.694164,0.000375872) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.393629,-0.0108923) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.380473,0.0102711) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.335755,-0.00115857) , 
2, -0.829253, 1, 0, 0.359239,0.0100593) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.332555,0.0053489) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.274038,-0.00529621) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.203536,-0.0148193) , 
1, -0.663844, 0, 0, 0.237644,-0.0175822) , 
0, -0.980384, 0, 0, 0.270112,-0.00794607) , 
3, -0.843184, 0, 0, 0.305002,-0.000897487) , 
3, -0.725613, 0, 0, 0.326513,-0.00618154) , 
1, -0.529689, 0, 0, 0.635179,-0.000676191)    );
  // itree = 32
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.841368,0.00834455) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.668533,-0.00109095) , 
2, -0.847545, 0, 0, 0.720417,0.00156455) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.391632,0.00621279) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.344903,-0.0123108) , 
4, 0.363357, 0, 0, 0.360607,-0.0120895) , 
1, -0.464995, 0, 0, 0.665751,-0.000509922) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.470074,-0.0210727) , 
4, 0.0929724, 0, 0, 0.655336,-0.00271624) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.683807,-0.0106206) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.751409,0.0107695) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.652499,-0.000425124) , 
4, -0.655854, 1, 0, 0.665396,0.00132633) , 
4, -0.786215, 1, 0, 0.666473,0.000323863) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.675568,-0.00360546) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.494643,0.0238666) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.359628,0.00833678) , 
1, -0.495408, 0, 0, 0.429546,0.0332915) , 
0, -0.915029, 0, 0, 0.527956,0.0173347) , 
4, -0.102076, 1, 0, 0.645674,0.0028781) , 
4, 0.047619, 0, 0, 0.650252,0.000227697) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.293909,0.0120076) , 
1, -0.809637, 0, 0, 0.636317,0.00105405)    );
  // itree = 33
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.814766,-0.00277525) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.593836,0.00543936) , 
1, -0.116317, 0, 0, 0.73244,0.00166252) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.373796,-0.0161735) , 
1, -0.464799, 0, 0, 0.706251,-0.000944349) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.335941,0.0126677) , 
1, -0.61889, 0, 0, 0.679877,0.000849855) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.741604,0.0198633) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.339761,-0.00108695) , 
0, -0.941184, 0, 0, 0.571461,0.017842) , 
4, 0.224122, 0, 0, 0.667002,0.00286776) , 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.828533,0.000699845) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.456805,0.00878078) , 
0, -0.913782, 0, 0, 0.776026,0.00335371) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.47362,0.00566522) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.45043,-0.0230517) , 
1, -0.388572, 1, 0, 0.462178,-0.01772) , 
1, -0.305654, 0, 0, 0.730093,0.000269503) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.375271,0.0132138) , 
1, -0.523741, 0, 0, 0.699033,0.00249888) , 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.7732,0.00191514) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.65908,-0.0244098) , 
4, -0.147192, 1, 0, 0.717371,-0.0192748) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.486146,0.00164888) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.470268,-0.00807505) , 
4, -0.188477, 0, 0, 0.4826,-0.00108845) , 
1, -0.18766, 0, 0, 0.543091,-0.00577436) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.245505,-0.0166312) , 
1, -0.748177, 0, 0, 0.510733,-0.00844582) , 
4, -0.291947, 1, 0, 0.615395,-0.00236243) , 
4, 0.142638, 0, 0, 0.636768,-0.000196343)    );
  // itree = 34
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.875961,-0.0200827) , 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.963439,0.0390836) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.884499,0.00547846) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.846933,-0.00789759) , 
1, 0.26391, 0, 0, 0.869582,-0.000333633) , 
3, -0.792506, 0, 0, 0.88636,0.00289223) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.73803,0.01557) , 
3, -0.963982, 0, 0, 0.866718,0.00592088) , 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.706156,-0.000551488) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.527592,0.0082413) , 
3, -0.921552, 0, 0, 0.63773,0.00562653) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.775083,-0.0108323) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.510878,-0.000405333) , 
1, -0.0607427, 0, 0, 0.563692,-0.00352434) , 
4, 0.303433, 0, 0, 0.58246,-0.00120473) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.539917,-0.0191005) , 
4, 0.708742, 1, 0, 0.581183,-0.00221496) , 
1, 0.160291, 0, 0, 0.628292,-0.000872666) , 
1, 0.522905, 0, 0, 0.634869,-0.00128972)    );
  // itree = 35
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.957002,0.030097) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.949481,1.21612e-05) , 
4, 0.386643, 1, 0, 0.95389,0.00838545) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.899892,-0.00636328) , 
2, -0.866033, 0, 0, 0.929452,0.00241241) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.925746,0.00973535) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.897379,-0.021461) , 
4, -0.0392341, 0, 0, 0.91176,-0.00429559) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.836081,-0.0268306) , 
1, 0.280587, 1, 0, 0.885601,-0.0123269) , 
0, -0.515031, 0, 0, 0.909199,-0.00439527) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.759807,0.0155613) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.639107,0.0103906) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.575118,0.0012882) , 
3, -0.618704, 0, 0, 0.577908,0.00303866) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.57164,-0.0101434) , 
4, -0.715118, 0, 0, 0.577703,0.00233526) , 
1, 0.254204, 0, 0, 0.582907,0.00300141) , 
0, -0.654774, 0, 0, 0.641302,0.00167766) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.834251,0.00705699) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.325614,-0.0152624) , 
1, -0.383719, 0, 0, 0.568758,-0.0117371) , 
2, -0.618558, 1, 0, 0.638071,0.00108028)    );
  // itree = 36
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.923073,0.00556678) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.691651,-0.0275162) , 
1, 0.0964973, 0, 0, 0.817303,-0.0173929) , 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.747902,-0.00499364) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.609388,0.00452294) , 
4, 0.244434, 0, 0, 0.728366,-0.00441171) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.518623,-0.0139293) , 
4, 0.165081, 0, 0, 0.702555,-0.00709222) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.889674,-0.00267571) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.736255,-0.0180494) , 
1, -0.140232, 0, 0, 0.847303,-0.00928305) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.744233,0.0156347) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.453566,0.0016879) , 
1, -0.299902, 0, 0, 0.515287,0.00857648) , 
0, -0.835572, 0, 0, 0.650722,0.0012913) , 
4, 0.0772809, 0, 0, 0.676108,-0.00281478) , 
4, -0.613474, 1, 0, 0.687844,-0.00402647) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.703049,0.0172705) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.702766,-0.00867522) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.611804,0.0164213) , 
3, -0.947318, 0, 0, 0.640266,0.0159591) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.584632,0.00398316) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.425323,-0.00767253) , 
3, -0.966095, 0, 0, 0.529379,-0.000640494) , 
4, -0.549934, 1, 0, 0.57425,0.00607661) , 
3, -0.920958, 0, 0, 0.59049,0.00877638) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.665733,0.0138972) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.620479,-0.00251185) , 
4, 0.70845, 1, 0, 0.64524,0.0105685) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.793527,-0.00747143) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.480033,0.00452081) , 
1, -0.0798714, 0, 0, 0.57979,0.00308721) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.623541,-0.0120129) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.294868,-0.00365363) , 
0, -0.952138, 0, 0, 0.465265,-0.0149005) , 
3, -0.942912, 0, 0, 0.511356,-0.00766131) , 
4, 0.563594, 0, 0, 0.550308,-0.00235751) , 
4, -0.142571, 1, 0, 0.567758,0.00247766) , 
3, -0.907783, 0, 0, 0.634903,-0.00115906)    );
  // itree = 37
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.894356,-0.0154723) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.901826,-0.00544159) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.921473,0.0408256) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.876918,0.0145954) , 
4, 0.200037, 0, 0, 0.888629,0.020044) , 
4, 0.447473, 0, 0, 0.891475,0.0148724) , 
3, -0.698692, 0, 0, 0.892159,0.00860864) , 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.826971,0.00557426) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.785078,-0.00276773) , 
4, -0.330074, 1, 0, 0.801251,0.000312976) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.728791,0.000744282) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.529976,0.0113593) , 
1, -0.00237568, 0, 0, 0.639768,0.0115044) , 
3, -0.958018, 0, 0, 0.769987,0.00247967) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.411182,-0.0122662) , 
2, -0.975998, 0, 0, 0.744096,0.000469017) , 
2, -0.831984, 0, 0, 0.780438,0.0024669) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.605051,0.0107435) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.439862,0.00319213) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.4325,-0.00595208) , 
4, -0.214705, 0, 0, 0.436939,-0.000949429) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.482309,-0.00316038) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.315139,-0.0146967) , 
3, -0.944707, 0, 0, 0.432717,-0.0131986) , 
4, 0.247528, 1, 0, 0.435822,-0.00419039) , 
3, -0.612804, 0, 0, 0.447201,-0.00251865) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.387472,-0.0147453) , 
2, -0.617988, 1, 0, 0.443317,-0.00422638) , 
1, -0.238061, 0, 0, 0.63523,-0.0004161)    );
  // itree = 38
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.780532,0.0170412) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.919104,0.00611144) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.708411,-0.0227971) , 
1, -0.193306, 0, 0, 0.818007,-0.0154749) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.809372,-0.0172334) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.807452,0.000763991) , 
2, -0.695893, 0, 0, 0.807536,9.16128e-05) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.61357,0.0119333) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.414946,0.00173562) , 
0, -0.927583, 0, 0, 0.450034,0.00743291) , 
0, -0.910545, 0, 0, 0.687178,0.00256316) , 
3, -0.6612, 0, 0, 0.695046,0.00147837) , 
2, -0.603726, 0, 0, 0.697455,0.00209428) , 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.34823,0.00579794) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.331051,-0.000986019) , 
4, 0.104646, 1, 0, 0.339251,0.00445206) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.32565,-0.000372257) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.280875,-0.0142012) , 
4, 0.059545, 0, 0, 0.305673,-0.012505) , 
2, -0.773424, 1, 0, 0.326257,-0.0021097) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.323003,-0.00938269) , 
4, -0.215852, 0, 0, 0.325436,-0.00621118) , 
1, -0.52381, 0, 0, 0.636841,0.000741047)    );
  // itree = 39
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.823883,-0.00897352) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.842578,0.026491) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.77773,-0.00591858) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.70015,0.00877458) , 
4, -0.463578, 1, 0, 0.722375,0.00747852) , 
4, -0.554514, 1, 0, 0.741646,0.0109881) , 
4, -0.629324, 1, 0, 0.758559,0.00680431) , 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.928339,0.0183339) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.860248,-0.00255124) , 
2, -0.818002, 0, 0, 0.877873,0.00131165) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.530455,0.00908623) , 
1, -0.269894, 0, 0, 0.79817,0.00518002) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.723369,-0.00130862) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.341587,-0.00740355) , 
0, -0.936437, 0, 0, 0.594461,-0.00633025) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.601413,-0.00256091) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.55368,0.0122537) , 
4, 0.0978905, 0, 0, 0.577941,0.00960655) , 
2, -0.903709, 0, 0, 0.591312,-0.00329215) , 
4, 0.401724, 0, 0, 0.661935,-0.000399669) , 
4, -0.236527, 1, 0, 0.695089,0.00207219) , 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.704963,-0.0061151) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.640002,0.00656939) , 
3, -0.953333, 0, 0, 0.682982,-0.00222598) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.458289,-0.0110822) , 
3, -0.972783, 0, 0, 0.622527,-0.00737623) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.617576,0.0167997) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.53858,-0.00165335) , 
4, 0.383286, 0, 0, 0.57438,0.0117256) , 
4, 0.492129, 0, 0, 0.601582,0.000933723) , 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.605732,-0.00342817) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.501718,0.00847468) , 
4, -0.268554, 1, 0, 0.588727,-0.00227156) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.410358,-0.0114521) , 
4, -0.146608, 1, 0, 0.571519,-0.00424493) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.472988,-0.0101384) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.416266,-0.0280625) , 
3, -0.935819, 0, 0, 0.447916,-0.0352929) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.395148,0.00153194) , 
3, -0.959122, 0, 0, 0.430471,-0.0226541) , 
4, -0.0566929, 1, 0, 0.538061,-0.00861186) , 
4, 0.238095, 0, 0, 0.561683,-0.00506206) , 
3, -0.904753, 0, 0, 0.634827,-0.00115047)    );
  // itree = 40
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.814864,0.00276643) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.794918,-0.00940769) , 
2, -0.666716, 1, 0, 0.810655,0.000228973) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.488684,0.0148139) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.287191,0.000780885) , 
0, -0.944535, 0, 0, 0.383563,0.0163018) , 
1, -0.496276, 0, 0, 0.700437,0.00437681) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.875452,0.00949178) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.715681,-0.000896673) , 
2, -0.844631, 0, 0, 0.738349,0.00013113) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.475548,-0.0127021) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.40903,-0.00312342) , 
2, -0.824124, 0, 0, 0.416536,-0.00855893) , 
1, -0.292179, 0, 0, 0.637474,-0.00259286) , 
2, -0.796073, 0, 0, 0.649738,-0.0012353) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.289661,0.0092565) , 
1, -0.809443, 0, 0, 0.636565,-0.000590254) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.541872,-0.0185758) , 
2, -0.52381, 1, 0, 0.634536,-0.00122333)    );
  // itree = 41
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.909952,0.0479274) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.905355,-0.00691839) , 
4, 0.376766, 1, 0, 0.907257,0.0161912) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.882348,-0.00105364) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.796029,-0.0149192) , 
2, -0.691074, 1, 0, 0.848251,-0.00797471) , 
4, 0.106226, 0, 0, 0.874638,0.00283199) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.489289,-0.00664424) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.463712,-0.0306522) , 
4, 0.0826412, 1, 0, 0.478591,-0.0321503) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.62175,0.0113943) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.329538,0.00282714) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.311854,-0.0143317) , 
4, -0.0466794, 1, 0, 0.319684,-0.0128779) , 
0, -0.882154, 0, 0, 0.404118,-0.00281856) , 
2, -0.75512, 1, 0, 0.433761,-0.0144935) , 
0, -0.809505, 0, 0, 0.640715,-0.00636067) , 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.902891,0.00171592) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.81456,-0.0113353) , 
3, -0.949638, 0, 0, 0.887775,-0.00131656) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.807961,0.0199299) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.759915,-0.00317157) , 
4, -0.237893, 1, 0, 0.783144,0.0114333) , 
2, -0.936891, 0, 0, 0.859977,0.00207074) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.589093,-0.00710638) , 
2, -0.968347, 0, 0, 0.831201,0.000247566) , 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.796131,0.0170942) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.793514,-0.000213151) , 
2, -0.883404, 1, 0, 0.794267,0.00728221) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.45744,-0.0165558) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.354018,0.00111245) , 
1, -0.640431, 0, 0, 0.406637,-0.0173886) , 
0, -0.932764, 0, 0, 0.658541,-0.00135612) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.667254,0.0229016) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.575589,0.00613734) , 
4, 0.393487, 0, 0, 0.592995,0.0172349) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.47588,0.00511891) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.341549,-0.00724187) , 
3, -0.987159, 0, 0, 0.458906,0.00726226) , 
3, -0.910095, 0, 0, 0.508221,0.0109299) , 
3, -0.828356, 0, 0, 0.545042,0.00792042) , 
1, 0.0375094, 0, 0, 0.63715,0.0054507) , 
2, -0.803193, 0, 0, 0.637997,0.00264491)    );
  // itree = 42
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.864182,-0.00574078) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.672904,0.0051258) , 
0, -0.875098, 0, 0, 0.839832,-0.00362164) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.801631,0.0222984) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.612802,0.0045568) , 
3, -0.848583, 0, 0, 0.699569,0.0211685) , 
1, -0.251837, 0, 0, 0.826079,-0.00119101) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.70327,-0.00556674) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.484473,-0.0167744) , 
0, -0.909765, 0, 0, 0.573997,-0.0257965) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.493944,0.00530217) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.477242,-0.00691376) , 
4, 0.159702, 1, 0, 0.488445,0.00290338) , 
1, -0.402946, 0, 0, 0.527829,-0.0103085) , 
1, -0.312286, 0, 0, 0.754349,-0.0033838) , 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.647308,0.00521255) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.542723,-0.00487692) , 
3, -0.940567, 0, 0, 0.623099,0.00487659) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.545323,0.0175481) , 
3, -0.952859, 0, 0, 0.605815,0.0116229) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.478756,0.00653672) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.345606,-0.00878936) , 
2, -0.965493, 0, 0, 0.403361,-0.00375922) , 
3, -0.966436, 0, 0, 0.546457,0.00711303) , 
2, -0.934096, 0, 0, 0.696789,-0.000477484) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.439117,0.0021899) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.401235,0.0194394) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.381454,0.00699879) , 
4, 0.00144836, 0, 0, 0.391692,0.0277212) , 
3, -0.723274, 0, 0, 0.412342,0.0176848) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.295246,-0.00867962) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.28233,0.0113764) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.219677,-0.00784851) , 
0, -0.995367, 0, 0, 0.258243,0.00750808) , 
0, -0.986098, 0, 0, 0.270871,-0.000959374) , 
0, -0.975659, 0, 0, 0.33855,0.00795992) , 
1, -0.52381, 0, 0, 0.63808,0.000905251)    );
  // itree = 43
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.856736,0.0134247) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.787194,-0.00949081) , 
2, -0.880777, 0, 0, 0.822906,0.000778812) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.865408,0.000155969) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.725984,0.0157371) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.487533,0.0228216) , 
1, -0.0893866, 0, 0, 0.60651,0.0358565) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.543685,-8.05701e-06) , 
4, 0.72634, 1, 0, 0.587039,0.0247387) , 
0, -0.673905, 0, 0, 0.655668,0.0186779) , 
3, -0.895887, 0, 0, 0.727425,0.0109979) , 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.897783,0.0120399) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.872687,-0.00447569) , 
3, -0.854313, 1, 0, 0.881099,0.000747462) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.442537,-0.00283138) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.426541,-0.0157661) , 
4, 0.207063, 1, 0, 0.438738,-0.0116583) , 
0, -0.825628, 0, 0, 0.642083,-0.0059556) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.691628,0.00643009) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.623541,-0.000836986) , 
4, 0.378079, 0, 0, 0.631935,-2.48031e-05) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.32495,0.0140922) , 
1, -0.713835, 0, 0, 0.618486,0.00115272) , 
2, -0.800468, 0, 0, 0.62354,-0.000369742) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.845155,0.0297783) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.325184,-0.00314777) , 
1, -0.415092, 0, 0, 0.579205,0.0149067) , 
2, -0.619048, 1, 0, 0.621247,0.000420535) , 
4, 0.522949, 0, 0, 0.638123,0.00210169)    );
  // itree = 44
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.891154,0.0115332) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.863915,-0.0141543) , 
2, -0.788003, 1, 0, 0.880138,0.000885739) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.524527,0.00979616) , 
1, -0.378055, 0, 0, 0.738934,0.00869165) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.807206,0.00267916) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.798766,-0.000903567) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.57772,-0.0184212) , 
4, 0.283205, 0, 0, 0.683165,-0.0177088) , 
4, -0.296759, 1, 0, 0.720805,-0.0114398) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.644055,0.000205615) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.469569,0.0113485) , 
3, -0.989714, 0, 0, 0.638179,0.00107085) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.483103,0.00308234) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.30473,-0.018205) , 
3, -0.972006, 0, 0, 0.411802,-0.00995208) , 
2, -0.968625, 0, 0, 0.617633,7.04486e-05) , 
3, -0.784039, 0, 0, 0.627366,-0.00101537) , 
3, -0.716541, 0, 0, 0.639187,1.31585e-05) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.687883,0.00774959) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.778696,-0.0049056) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.280733,-0.018077) , 
1, -0.460717, 0, 0, 0.549319,-0.019122) , 
4, 0.181014, 0, 0, 0.59405,-0.00962947) , 
2, -0.670479, 1, 0, 0.635961,-0.000676085)    );
  // itree = 45
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.851024,0.00238498) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.907159,-0.00589295) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.603124,-0.0119638) , 
1, -0.091205, 0, 0, 0.745644,-0.0129996) , 
4, 0.586662, 0, 0, 0.779201,-0.00813594) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.770802,0.0239408) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.752737,-0.000540811) , 
2, -0.884424, 1, 0, 0.762636,0.0191181) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.68441,-0.0120107) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.592822,0.00291615) , 
3, -0.966873, 0, 0, 0.6398,-0.00674342) , 
3, -0.941973, 0, 0, 0.707042,0.00741355) , 
3, -0.878103, 0, 0, 0.74506,-0.000778847) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.691384,-0.0157138) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.391923,-0.00460455) , 
0, -0.875902, 0, 0, 0.522509,-0.0172178) , 
2, -0.945953, 0, 0, 0.696339,-0.00437767) , 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.9455,0.011248) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.91803,-0.0136598) , 
4, -0.528265, 1, 0, 0.9326,-0.000810794) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.871116,-0.0344338) , 
3, -0.891982, 0, 0, 0.912715,-0.00938455) , 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.856175,-0.00116265) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.541033,-0.00790196) , 
0, -0.83394, 0, 0, 0.694695,-0.00851075) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.677003,0.00896676) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.308746,-0.00351881) , 
1, -0.612628, 0, 0, 0.57919,0.00972288) , 
4, -0.236186, 1, 0, 0.628289,0.00197216) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.85622,0.0256874) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.514863,-0.0059417) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.469068,0.0048108) , 
3, -0.924021, 0, 0, 0.475099,0.00671918) , 
0, -0.771903, 0, 0, 0.524204,0.00999081) , 
3, -0.911357, 0, 0, 0.583718,0.0054059) , 
0, -0.564115, 0, 0, 0.615191,0.00399096) , 
4, 0.333991, 0, 0, 0.63901,0.00153459)    );
  // itree = 46
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.830389,0.00691213) , 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.816856,0.00964785) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.782914,-0.00277484) , 
2, -0.714881, 0, 0, 0.786344,-0.00212242) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.687353,0.0070851) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.584724,-0.00479815) , 
3, -0.924378, 0, 0, 0.652366,0.0046659) , 
2, -0.924526, 0, 0, 0.751928,-0.000378634) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.708191,0.00793586) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.394074,-0.00739124) , 
1, -0.0518488, 0, 0, 0.575752,0.00175036) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.57555,-0.000286678) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.466605,-0.00966101) , 
4, -0.318444, 1, 0, 0.52096,-0.00984582) , 
4, 0.429135, 0, 0, 0.536522,-0.00655237) , 
3, -0.945572, 0, 0, 0.687218,-0.00223328) , 
3, -0.619041, 0, 0, 0.694215,-0.00172448) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.361806,0.00913251) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.406339,0.00788319) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.364761,0.00496046) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.247334,-0.00171466) , 
3, -0.84714, 0, 0, 0.314401,0.0044264) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.285534,-0.00796173) , 
4, 0.0200549, 1, 0, 0.30352,-0.00286272) , 
1, -0.591867, 0, 0, 0.328827,0.00186202) , 
4, 0.30042, 0, 0, 0.334616,0.00473967) , 
1, -0.52381, 0, 0, 0.635789,-0.000674209)    );
  // itree = 47
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.941469,0.00923068) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.690653,-0.0151166) , 
0, -0.657252, 0, 0, 0.808881,-0.00948358) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.927177,-0.0142976) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.907587,-0.016152) , 
2, -0.830704, 0, 0, 0.917515,-0.00916847) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.762118,0.0238129) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.735708,0.0107783) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.35266,-0.00235666) , 
1, -0.594442, 0, 0, 0.59913,0.00966483) , 
4, -0.437682, 1, 0, 0.621385,0.0132456) , 
1, -0.0536199, 0, 0, 0.688407,0.00817277) , 
4, 0.385108, 0, 0, 0.714641,0.00432795) , 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.709808,0.0187716) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.843514,-0.00510242) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.478205,0.00758332) , 
1, -0.236913, 0, 0, 0.685356,0.00341243) , 
3, -0.842786, 0, 0, 0.691715,0.00993172) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.689617,0.00249936) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.671203,-0.0206739) , 
4, -0.036761, 0, 0, 0.680581,-0.013113) , 
3, -0.830687, 1, 0, 0.68861,0.00350441) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.739807,-0.0224342) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.660066,0.00331062) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.614121,-0.00750647) , 
3, -0.898926, 0, 0, 0.633719,-0.00500134) , 
4, -0.522617, 1, 0, 0.651168,-0.00892135) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.630142,0.000942558) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.441973,-0.00547105) , 
3, -0.975807, 0, 0, 0.588391,-0.0011027) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.356016,0.0144506) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.23878,-0.00371229) , 
1, -0.537119, 0, 0, 0.29642,0.0107173) , 
1, -0.428255, 0, 0, 0.545599,0.000629696) , 
3, -0.927437, 0, 0, 0.585445,-0.00297529) , 
3, -0.873013, 0, 0, 0.609253,-0.00147994) , 
3, -0.809516, 0, 0, 0.636688,3.20031e-05)    );
  // itree = 48
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.772322,0.00102147) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.348085,0.0156044) , 
1, -0.746278, 0, 0, 0.726665,0.00431178) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.67758,-0.00021684) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.623339,-0.00600831) , 
2, -0.814057, 1, 0, 0.657412,-0.00347001) , 
3, -0.798007, 0, 0, 0.681724,-0.000738086) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.50674,0.0181463) , 
3, -0.978888, 0, 0, 0.673964,0.000817801) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.665902,-0.00883761) , 
3, -0.556819, 1, 0, 0.673463,-7.26086e-05) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.772225,-0.00870007) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.601379,0.00789276) , 
3, -0.928682, 0, 0, 0.670254,0.00431803) , 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.879484,0.0193875) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.603913,0.00094727) , 
1, 0.119158, 0, 0, 0.73778,0.0106451) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.59421,-0.00824336) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.524956,-0.0169651) , 
2, -0.933264, 0, 0, 0.56589,-0.0220604) , 
4, 0.535286, 0, 0, 0.60378,-0.0148511) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.592574,-0.00965518) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.437004,0.00312846) , 
3, -0.965124, 0, 0, 0.533124,-0.00970329) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.297952,0.00774836) , 
1, -0.210802, 0, 0, 0.455835,-0.00180684) , 
2, -0.954649, 0, 0, 0.556509,-0.0106833) , 
4, -0.61938, 1, 0, 0.573832,-0.00839869) , 
2, -0.904762, 0, 0, 0.634137,-0.00335907)    );
  // itree = 49
  fBoostWeights.push_back(1);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.935141,-0.0162281) , 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.944219,0.0235958) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.87743,0.00216356) , 
2, -0.834374, 0, 0, 0.893098,0.00469802) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.800929,-0.00823463) , 
3, -0.962782, 0, 0, 0.883041,0.00301535) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.751832,0.0163018) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.5835,-7.53274e-05) , 
2, -0.971316, 0, 0, 0.681007,0.0162023) , 
2, -0.953449, 0, 0, 0.843822,0.00557524) , 
3, -0.739772, 0, 0, 0.851915,0.00439561) , 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.662638,-0.00127009) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.493074,-0.0225972) , 
4, 0.287428, 0, 0, 0.572562,-0.0213358) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.791876,0.00548231) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.403707,-0.0137618) , 
0, -0.903074, 0, 0, 0.556564,-0.0141465) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.775977,-0.00535263) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.429755,0.00500395) , 
0, -0.903582, 0, 0, 0.549658,0.00395743) , 
4, 0.499171, 0, 0, 0.551653,-0.00127185) , 
2, -0.777633, 0, 0, 0.556028,-0.00546971) , 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.641804,0.0118704) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.574491,-0.00221299) , 
4, -0.540689, 1, 0, 0.583895,-0.000551007) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.675632,-0.00888617) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.454419,-0.00920575) , 
1, -0.151776, 0, 0, 0.560151,-0.0167294) , 
4, -0.608563, 0, 0, 0.579024,-0.00387009) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.518095,0.0187155) , 
NN(
NN(
0, 
0, 
-1, 0, 1, -99, 0.550566,0.0105993) , 
NN(
0, 
0, 
-1, 0, 1, -99, 0.488656,-0.00356504) , 
4, -0.142894, 1, 0, 0.516021,0.00486782) , 
4, 0.00353072, 0, 0, 0.516306,0.00915788) , 
4, -0.252692, 1, 0, 0.551445,0.00185874) , 
4, 0.0462424, 0, 0, 0.553575,-0.0015472) , 
1, 0.0476616, 0, 0, 0.636463,0.000103905)    );
   return;
};
 
// Clean up
inline void ReadBDTG::Clear() 
{
   for (unsigned int itree=0; itree<fForest.size(); itree++) { 
      delete fForest[itree]; 
   }
}
   inline double ReadBDTG::GetMvaValue( const std::vector<double>& inputValues ) const
   {
      // classifier response value
      double retval = 0;

      // classifier response, sanity check first
      if (!IsStatusClean()) {
         std::cout << "Problem in class \"" << fClassName << "\": cannot return classifier response"
                   << " because status is dirty" << std::endl;
         retval = 0;
      }
      else {
         if (IsNormalised()) {
            // normalise variables
            std::vector<double> iV;
            int ivar = 0;
            for (std::vector<double>::const_iterator varIt = inputValues.begin();
                 varIt != inputValues.end(); varIt++, ivar++) {
               iV.push_back(NormVariable( *varIt, fVmin[ivar], fVmax[ivar] ));
            }
            Transform( iV, -1 );
            retval = GetMvaValue__( iV );
         }
         else {
            std::vector<double> iV;
            int ivar = 0;
            for (std::vector<double>::const_iterator varIt = inputValues.begin();
                 varIt != inputValues.end(); varIt++, ivar++) {
               iV.push_back(*varIt);
            }
            Transform( iV, -1 );
            retval = GetMvaValue__( iV );
         }
      }

      return retval;
   }

//_______________________________________________________________________
inline void ReadBDTG::InitTransform_1()
{
   // Normalization transformation, initialisation
   fMin_1[0][0] = 130000.945312;
   fMax_1[0][0] = 4303369.5;
   fMin_1[1][0] = 130001.4375;
   fMax_1[1][0] = 3732655;
   fMin_1[2][0] = 130000.945312;
   fMax_1[2][0] = 4303369.5;
   fMin_1[0][1] = 6.55800104141e-05;
   fMax_1[0][1] = 8.66915130615;
   fMin_1[1][1] = 0.000452756881714;
   fMax_1[1][1] = 8.39696788788;
   fMin_1[2][1] = 6.55800104141e-05;
   fMax_1[2][1] = 8.66915130615;
   fMin_1[0][2] = 25937.7109375;
   fMax_1[0][2] = 740365.75;
   fMin_1[1][2] = 25261.5429688;
   fMax_1[1][2] = 1058657.25;
   fMin_1[2][2] = 25261.5429688;
   fMax_1[2][2] = 1058657.25;
   fMin_1[0][3] = 25000.6738281;
   fMax_1[0][3] = 410493.90625;
   fMin_1[1][3] = 25001.2363281;
   fMax_1[1][3] = 398252.34375;
   fMin_1[2][3] = 25000.6738281;
   fMax_1[2][3] = 410493.90625;
   fMin_1[0][4] = -4.50821352005;
   fMax_1[0][4] = 4.51656913757;
   fMin_1[1][4] = -4.51713132858;
   fMax_1[1][4] = 4.50469923019;
   fMin_1[2][4] = -4.51713132858;
   fMax_1[2][4] = 4.51656913757;
}

//_______________________________________________________________________
inline void ReadBDTG::Transform_1( std::vector<double>& iv, int cls) const
{
   // Normalization transformation
   if (cls < 0 || cls > 2) {
   if (2 > 1 ) cls = 2;
      else cls = 2;
   }
   const int nVar = 5;

   // get indices of used variables

   // define the indices of the variables which are transformed by this transformation
   std::vector<int> indicesGet;
   std::vector<int> indicesPut;

   indicesGet.push_back( 0);
   indicesGet.push_back( 1);
   indicesGet.push_back( 2);
   indicesGet.push_back( 3);
   indicesGet.push_back( 4);
   indicesPut.push_back( 0);
   indicesPut.push_back( 1);
   indicesPut.push_back( 2);
   indicesPut.push_back( 3);
   indicesPut.push_back( 4);

   std::vector<double> dv(nVar);
   for (int ivar=0; ivar<nVar; ivar++) dv[ivar] = iv[indicesGet.at(ivar)];
   for (int ivar=0;ivar<5;ivar++) {
      double offset = fMin_1[cls][ivar];
      double scale  = 1.0/(fMax_1[cls][ivar]-fMin_1[cls][ivar]);
      iv[indicesPut.at(ivar)] = (dv[ivar]-offset)*scale * 2 - 1;
   }
}

//_______________________________________________________________________
inline void ReadBDTG::InitTransform()
{
   InitTransform_1();
}

//_______________________________________________________________________
inline void ReadBDTG::Transform( std::vector<double>& iv, int sigOrBgd ) const
{
   Transform_1( iv, sigOrBgd );
}
